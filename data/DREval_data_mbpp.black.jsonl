{"task_id": "DREval/154", "code": "def remove_Occ(s, ch):\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    return s\n", "entry_point": "remove_Occ", "inputs": ["(\"hello\",\"l\")", "(\"abcda\",\"a\")", "(\"PHP\",\"P\")"], "outputs": ["heo", "bcd", "H"], "innvocations": ["remove_Occ(\"hello\", \"l\")\n", "remove_Occ(\"abcda\", \"a\")\n", "remove_Occ(\"PHP\", \"P\")\n"]}
{"task_id": "DREval/155", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "entry_point": "sort_matrix", "inputs": ["[([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),]", "[([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),]", "[([[5,8,9],[6,4,3],[2,1,4]]),]"], "outputs": [[[1, 1, 1], [1, 2, 3], [2, 4, 5]], [[-2, 4, -5], [1, -1, 1], [1, 2, 3]], [[2, 1, 4], [6, 4, 3], [5, 8, 9]]], "innvocations": ["sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n", "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n", "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n"]}
{"task_id": "DREval/156", "code": "from collections import Counter\n\n\ndef count_common(words):\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four\n", "entry_point": "count_common", "inputs": ["[(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']),]", "[(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']),]", "[(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']),]"], "outputs": [[["pink", 6], ["black", 5], ["white", 5], ["red", 4]], [["one", 4], ["two", 2], ["three", 2], ["four", 1]], [["Apple", 2], ["Amazon", 2], ["Netflix", 2], ["Facebook", 1]]], "innvocations": ["count_common(\n    [\n        \"red\",\n        \"green\",\n        \"black\",\n        \"pink\",\n        \"black\",\n        \"white\",\n        \"black\",\n        \"eyes\",\n        \"white\",\n        \"black\",\n        \"orange\",\n        \"pink\",\n        \"pink\",\n        \"red\",\n        \"red\",\n        \"white\",\n        \"orange\",\n        \"white\",\n        \"black\",\n        \"pink\",\n        \"green\",\n        \"green\",\n        \"pink\",\n        \"green\",\n        \"pink\",\n        \"white\",\n        \"orange\",\n        \"orange\",\n        \"red\",\n    ]\n)\n", "count_common([\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"])\n", "count_common([\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"])\n"]}
{"task_id": "DREval/160", "code": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n", "entry_point": "square_perimeter", "inputs": ["(10,)", "(5,)", "(4,)"], "outputs": [40, 20, 16], "innvocations": ["square_perimeter(10)\n", "square_perimeter(5)\n", "square_perimeter(4)\n"]}
{"task_id": "DREval/161", "code": "NO_OF_CHARS = 256\n\n\ndef str_to_list(string):\n    temp = []\n    for x in string:\n        temp.append(x)\n    return temp\n\n\ndef lst_to_string(List):\n    return \"\".join(List)\n\n\ndef get_char_count_array(string):\n    count = [0] * NO_OF_CHARS\n    for i in string:\n        count[ord(i)] += 1\n    return count\n\n\ndef remove_dirty_chars(string, second_string):\n    count = get_char_count_array(second_string)\n    ip_ind = 0\n    res_ind = 0\n    temp = \"\"\n    str_list = str_to_list(string)\n    while ip_ind != len(str_list):\n        temp = str_list[ip_ind]\n        if count[ord(temp)] == 0:\n            str_list[res_ind] = str_list[ip_ind]\n            res_ind += 1\n        ip_ind += 1\n    return lst_to_string(str_list[0:res_ind])\n", "entry_point": "remove_dirty_chars", "inputs": ["(\"probasscurve\", \"pros\")", "(\"digitalindia\", \"talent\")", "(\"exoticmiles\", \"toxic\")"], "outputs": ["bacuve", "digiidi", "emles"], "innvocations": ["remove_dirty_chars(\"probasscurve\", \"pros\")\n", "remove_dirty_chars(\"digitalindia\", \"talent\")\n", "remove_dirty_chars(\"exoticmiles\", \"toxic\")\n"]}
{"task_id": "DREval/163", "code": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    if x == 1:\n        return True\n    x = x + 1\n    p = 0\n    while x % 2 == 0:\n        x = x / 2\n        p = p + 1\n        if p == x:\n            return True\n    return False\n", "entry_point": "is_woodall", "inputs": ["(383,)", "(254,)", "(200,)"], "outputs": [true, false, false], "innvocations": ["is_woodall(383)\n", "is_woodall(254)\n", "is_woodall(200)\n"]}
{"task_id": "DREval/165", "code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate\n", "entry_point": "find_first_duplicate", "inputs": ["[(([1, 2, 3, 4, 4, 5])),]", "[([1, 2, 3, 4]),]", "[([1, 1, 2, 3, 3, 2, 2]),]"], "outputs": [4, -1, 1], "innvocations": ["find_first_duplicate(([1, 2, 3, 4, 4, 5]))\n", "find_first_duplicate([1, 2, 3, 4])\n", "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n"]}
{"task_id": "DREval/166", "code": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi\n", "entry_point": "maximum_Sum", "inputs": ["[([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]),]", "[([[0,1,1],[1,1,2],[3,2,1]]),]", "[([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]),]"], "outputs": [33, 6, 19], "innvocations": ["maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n", "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n", "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n"]}
{"task_id": "DREval/167", "code": "def binary_to_decimal(binary):\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n", "entry_point": "binary_to_decimal", "inputs": ["(100,)", "(1011,)", "(1101101,)"], "outputs": [4, 11, 109], "innvocations": ["binary_to_decimal(100)\n", "binary_to_decimal(1011)\n", "binary_to_decimal(1101101)\n"]}
{"task_id": "DREval/168", "code": "def find_Product(arr, n):\n    arr.sort()\n    prod = 1\n    for i in range(0, n, 1):\n        if arr[i - 1] != arr[i]:\n            prod = prod * arr[i]\n    return prod\n", "entry_point": "find_Product", "inputs": ["([1,1,2,3],4)", "([1,2,3,1,1],5)", "([1,1,4,5,6],5)"], "outputs": [6, 6, 120], "innvocations": ["find_Product([1, 1, 2, 3], 4)\n", "find_Product([1, 2, 3, 1, 1], 5)\n", "find_Product([1, 1, 4, 5, 6], 5)\n"]}
{"task_id": "DREval/169", "code": "def check_k_elements(test_list, K):\n    res = True\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                res = False\n    return res\n", "entry_point": "check_k_elements", "inputs": ["([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)", "([(7, 7, 7), (7, 7)], 7)", "([(9, 9), (9, 9, 9, 9)], 7)"], "outputs": [true, true, false], "innvocations": ["check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)\n", "check_k_elements([(7, 7, 7), (7, 7)], 7)\n", "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)\n"]}
{"task_id": "DREval/170", "code": "import re\n\n\ndef remove(list):\n    pattern = \"[0-9]\"\n    list = [re.sub(pattern, \"\", i) for i in list]\n    return list\n", "entry_point": "remove", "inputs": ["[(['4words', '3letters', '4digits']),]", "[(['28Jan','12Jan','11Jan']),]", "[(['wonder1','wonder2','wonder3']),]"], "outputs": [["words", "letters", "digits"], ["Jan", "Jan", "Jan"], ["wonder", "wonder", "wonder"]], "innvocations": ["remove([\"4words\", \"3letters\", \"4digits\"])\n", "remove([\"28Jan\", \"12Jan\", \"11Jan\"])\n", "remove([\"wonder1\", \"wonder2\", \"wonder3\"])\n"]}
{"task_id": "DREval/172", "code": "def get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n", "entry_point": "get_Odd_Occurrence", "inputs": ["([1,2,3,1,2,3,1],7)", "([1,2,3,2,3,1,3],7)", "([2,3,5,4,5,2,4,3,5,2,4,4,2],13)"], "outputs": [1, 3, 5], "innvocations": ["get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)\n", "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)\n", "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n"]}
{"task_id": "DREval/173", "code": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i : i + j]):\n                result += 1\n    return result\n", "entry_point": "count_Substring_With_Equal_Ends", "inputs": ["[(\"abc\"),]", "[(\"abcda\"),]", "[(\"ab\"),]"], "outputs": [3, 6, 2], "innvocations": ["count_Substring_With_Equal_Ends(\"abc\")\n", "count_Substring_With_Equal_Ends(\"abcda\")\n", "count_Substring_With_Equal_Ends(\"ab\")\n"]}
{"task_id": "DREval/174", "code": "def func(nums, k):\n    import collections\n\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result\n", "entry_point": "func", "inputs": ["([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)", "([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)", "([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)"], "outputs": [[5, 7, 1], [1], [6, 5, 7, 8, 1]], "innvocations": ["func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n", "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n", "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n"]}
{"task_id": "DREval/175", "code": "import math\n\n\ndef max_Prime_Factors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n", "entry_point": "max_Prime_Factors", "inputs": ["(15,)", "(6,)", "(2,)"], "outputs": [5, 3, 2], "innvocations": ["max_Prime_Factors(15)\n", "max_Prime_Factors(6)\n", "max_Prime_Factors(2)\n"]}
{"task_id": "DREval/176", "code": "def decimal_To_Binary(N):\n    B_Number = 0\n    cnt = 0\n    while N != 0:\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number\n", "entry_point": "decimal_To_Binary", "inputs": ["(10,)", "(1,)", "(20,)"], "outputs": [1010, 1, 10100], "innvocations": ["decimal_To_Binary(10)\n", "decimal_To_Binary(1)\n", "decimal_To_Binary(20)\n"]}
{"task_id": "DREval/177", "code": "def find_missing(ar, N):\n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) / 2\n        mid = int(mid)\n        if ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n", "entry_point": "find_missing", "inputs": ["([1,2,3,5],4)", "([1,3,4,5],4)", "([1,2,3,5,6,7],5)"], "outputs": [4, 2, 4], "innvocations": ["find_missing([1, 2, 3, 5], 4)\n", "find_missing([1, 3, 4, 5], 4)\n", "find_missing([1, 2, 3, 5, 6, 7], 5)\n"]}
{"task_id": "DREval/179", "code": "def find_Nth_Digit(p, q, N):\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res\n", "entry_point": "find_Nth_Digit", "inputs": ["(1,2,1)", "(3,5,1)", "(5,6,5)"], "outputs": [5, 6, 3], "innvocations": ["find_Nth_Digit(1, 2, 1)\n", "find_Nth_Digit(3, 5, 1)\n", "find_Nth_Digit(5, 6, 5)\n"]}
{"task_id": "DREval/182", "code": "import heapq\nfrom collections import Counter\n\n\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1:\n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1:\n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1:\n            heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")\n", "entry_point": "rearange_string", "inputs": ["[(\"aab\"),]", "[(\"aabb\"),]", "[(\"abccdd\"),]"], "outputs": ["aba", "abab", "cdabcd"], "innvocations": ["rearange_string(\"aab\")\n", "rearange_string(\"aabb\")\n", "rearange_string(\"abccdd\")\n"]}
{"task_id": "DREval/183", "code": "from collections import Counter\nfrom itertools import chain\n\n\ndef freq_element(nums):\n    result = Counter(chain.from_iterable(nums))\n    return result\n", "entry_point": "freq_element", "inputs": ["[([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]),]", "[([[1,2,3,4],[5,6,7,8],[9,10,11,12]]),]", "[([[15,20,30,40],[80,90,100,110],[30,30,80,90]]),]"], "outputs": [{"1": 2, "2": 3, "3": 1, "4": 1, "5": 2, "6": 1, "7": 1, "9": 1}, {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1}, {"15": 1, "20": 1, "30": 3, "40": 1, "80": 2, "90": 2, "100": 1, "110": 1}], "innvocations": ["freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n", "freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n", "freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n"]}
{"task_id": "DREval/184", "code": "def filter_evennumbers(nums):\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n", "entry_point": "filter_evennumbers", "inputs": ["[([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),]", "[([10,20,45,67,84,93]),]", "[([5,7,9,8,6,4,3]),]"], "outputs": [[2, 4, 6, 8, 10], [10, 20, 84], [8, 6, 4]], "innvocations": ["filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n", "filter_evennumbers([10, 20, 45, 67, 84, 93])\n", "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])\n"]}
{"task_id": "DREval/188", "code": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n", "entry_point": "get_gcd", "inputs": ["[([2, 4, 6, 8, 16]),]", "[([1, 2, 3]),]", "[([2, 4, 6, 8]),]"], "outputs": [2, 1, 2], "innvocations": ["get_gcd([2, 4, 6, 8, 16])\n", "get_gcd([1, 2, 3])\n", "get_gcd([2, 4, 6, 8])\n"]}
{"task_id": "DREval/190", "code": "def compute_Last_Digit(A, B):\n    variable = 1\n    if A == B:\n        return 1\n    elif (B - A) >= 5:\n        return 0\n    else:\n        for i in range(A + 1, B + 1):\n            variable = (variable * (i % 10)) % 10\n        return variable % 10\n", "entry_point": "compute_Last_Digit", "inputs": ["(2,4)", "(6,8)", "(1,2)"], "outputs": [2, 6, 2], "innvocations": ["compute_Last_Digit(2, 4)\n", "compute_Last_Digit(6, 8)\n", "compute_Last_Digit(1, 2)\n"]}
{"task_id": "DREval/191", "code": "def odd_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "entry_point": "odd_bit_set_number", "inputs": ["(10,)", "(20,)", "(30,)"], "outputs": [15, 21, 31], "innvocations": ["odd_bit_set_number(10)\n", "odd_bit_set_number(20)\n", "odd_bit_set_number(30)\n"]}
{"task_id": "DREval/192", "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "entry_point": "specified_element", "inputs": ["([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)", "([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)", "([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)"], "outputs": [[1, 4, 7], [3, 6, 9], [2, 5, 1]], "innvocations": ["specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n", "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n", "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n"]}
{"task_id": "DREval/193", "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)\n", "entry_point": "min_length_list", "inputs": ["[([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),]", "[([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]),]", "[([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]),]"], "outputs": [[1, [0]], [1, [1]], [2, [1, 2]]], "innvocations": ["min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n", "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n", "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])\n"]}
{"task_id": "DREval/195", "code": "def parallelogram_area(b, h):\n    area = b * h\n    return area\n", "entry_point": "parallelogram_area", "inputs": ["(10,20)", "(15,20)", "(8,9)"], "outputs": [200, 300, 72], "innvocations": ["parallelogram_area(10, 20)\n", "parallelogram_area(15, 20)\n", "parallelogram_area(8, 9)\n"]}
{"task_id": "DREval/197", "code": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n    return my_list\n", "entry_point": "counting_sort", "inputs": ["[([1,23,4,5,6,7,8]),]", "[([12, 9, 28, 33, 69, 45]),]", "[([8, 4, 14, 3, 2, 1]),]"], "outputs": [[1, 4, 5, 6, 7, 8, 23], [9, 12, 28, 33, 45, 69], [1, 2, 3, 4, 8, 14]], "innvocations": ["counting_sort([1, 23, 4, 5, 6, 7, 8])\n", "counting_sort([12, 9, 28, 33, 69, 45])\n", "counting_sort([8, 4, 14, 3, 2, 1])\n"]}
{"task_id": "DREval/198", "code": "import math\n\n\ndef tn_gp(a, n, r):\n    tn = a * (math.pow(r, n - 1))\n    return tn\n", "entry_point": "tn_gp", "inputs": ["(1,5,2)", "(1,5,4)", "(2,6,3)"], "outputs": [16.0, 256.0, 486.0], "innvocations": ["tn_gp(1, 5, 2)\n", "tn_gp(1, 5, 4)\n", "tn_gp(2, 6, 3)\n"]}
{"task_id": "DREval/199", "code": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n", "entry_point": "check", "inputs": ["(70,)", "(23,)", "(73,)"], "outputs": [false, false, true], "innvocations": ["check(70)\n", "check(23)\n", "check(73)\n"]}
{"task_id": "DREval/200", "code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    num = arr[0]\n    for i in range(1, n):\n        num = num * 10 + arr[i]\n    return num\n", "entry_point": "find_Max_Num", "inputs": ["([1,2,3],3)", "([4,5,6,1],4)", "([1,2,3,9],4)"], "outputs": [321, 6541, 9321], "innvocations": ["find_Max_Num([1, 2, 3], 3)\n", "find_Max_Num([4, 5, 6, 1], 4)\n", "find_Max_Num([1, 2, 3, 9], 4)\n"]}
{"task_id": "DREval/203", "code": "def max_len_sub(arr, n):\n    mls = []\n    max = 0\n    for i in range(n):\n        mls.append(1)\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1:\n                mls[i] = mls[j] + 1\n    for i in range(n):\n        if max < mls[i]:\n            max = mls[i]\n    return max\n", "entry_point": "max_len_sub", "inputs": ["([2, 5, 6, 3, 7, 6, 5, 8], 8)", "([-2, -1, 5, -1, 4, 0, 3], 7)", "([9, 11, 13, 15, 18], 5)"], "outputs": [5, 4, 1], "innvocations": ["max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n", "max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)\n", "max_len_sub([9, 11, 13, 15, 18], 5)\n"]}
{"task_id": "DREval/204", "code": "from collections import defaultdict\n\n\ndef count_Substrings(s, n):\n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord(\"0\")\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\n", "entry_point": "count_Substrings", "inputs": ["('112112',6)", "('111',3)", "('1101112',7)"], "outputs": [6, 6, 12], "innvocations": ["count_Substrings(\"112112\", 6)\n", "count_Substrings(\"111\", 3)\n", "count_Substrings(\"1101112\", 7)\n"]}
{"task_id": "DREval/206", "code": "def max_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res\n", "entry_point": "max_difference", "inputs": ["[([(3, 5), (1, 7), (10, 3), (1, 2)]),]", "[([(4, 6), (2, 17), (9, 13), (11, 12)]),]", "[([(12, 35), (21, 27), (13, 23), (41, 22)]),]"], "outputs": [7, 15, 23], "innvocations": ["max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n", "max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n", "max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n"]}
{"task_id": "DREval/207", "code": "def subject_marks(subjectmarks):\n    # subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n", "entry_point": "subject_marks", "inputs": ["[([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]),]", "[([('Telugu',49),('Hindhi',54),('Social',33)]),]", "[([('Physics',96),('Chemistry',97),('Biology',45)]),]"], "outputs": [[["Social sciences", 82], ["English", 88], ["Science", 90], ["Maths", 97]], [["Social", 33], ["Telugu", 49], ["Hindhi", 54]], [["Biology", 45], ["Physics", 96], ["Chemistry", 97]]], "innvocations": ["subject_marks([(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)])\n", "subject_marks([(\"Telugu\", 49), (\"Hindhi\", 54), (\"Social\", 33)])\n", "subject_marks([(\"Physics\", 96), (\"Chemistry\", 97), (\"Biology\", 45)])\n"]}
{"task_id": "DREval/208", "code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total\n", "entry_point": "recursive_list_sum", "inputs": ["[(([1, 2, [3,4],[5,6]])),]", "[(([7, 10, [15,14],[19,41]])),]", "[(([10, 20, [30,40],[50,60]])),]"], "outputs": [21, 106, 210], "innvocations": ["recursive_list_sum(([1, 2, [3, 4], [5, 6]]))\n", "recursive_list_sum(([7, 10, [15, 14], [19, 41]]))\n", "recursive_list_sum(([10, 20, [30, 40], [50, 60]]))\n"]}
{"task_id": "DREval/209", "code": "def pos_count(list):\n    pos_count = 0\n    for num in list:\n        if num >= 0:\n            pos_count += 1\n    return pos_count\n", "entry_point": "pos_count", "inputs": ["[([1,-2,3,-4]),]", "[([3,4,5,-1]),]", "[([1,2,3,4]),]"], "outputs": [2, 3, 4], "innvocations": ["pos_count([1, -2, 3, -4])\n", "pos_count([3, 4, 5, -1])\n", "pos_count([1, 2, 3, 4])\n"]}
{"task_id": "DREval/212", "code": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i + n] == s[n]):\n                    n += 1\n                if n == len(s):\n                    sub_set = True\n    return sub_set\n", "entry_point": "is_sublist", "inputs": ["([2,4,3,5,7],[3,7])", "([2,4,3,5,7],[4,3])", "([2,4,3,5,7],[1,6])"], "outputs": [false, true, false], "innvocations": ["is_sublist([2, 4, 3, 5, 7], [3, 7])\n", "is_sublist([2, 4, 3, 5, 7], [4, 3])\n", "is_sublist([2, 4, 3, 5, 7], [1, 6])\n"]}
{"task_id": "DREval/213", "code": "def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n        if len(tuple) != k:\n            flag = 0\n            break\n    return flag\n\n\ndef get_equal(Input, k):\n    if find_equal_tuple(Input, k) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n", "entry_point": "get_equal", "inputs": ["([(11, 22, 33), (44, 55, 66)], 3)", "([(1, 2, 3), (4, 5, 6, 7)], 3)", "([(1, 2), (3, 4)], 2)"], "outputs": ["All tuples have same length", "All tuples do not have same length", "All tuples have same length"], "innvocations": ["get_equal([(11, 22, 33), (44, 55, 66)], 3)\n", "get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)\n", "get_equal([(1, 2), (3, 4)], 2)\n"]}
{"task_id": "DREval/214", "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\n", "entry_point": "comb_sort", "inputs": ["[([5, 15, 37, 25, 79]),]", "[([41, 32, 15, 19, 22]),]", "[([99, 15, 13, 47]),]"], "outputs": [[5, 15, 25, 37, 79], [15, 19, 22, 32, 41], [13, 15, 47, 99]], "innvocations": ["comb_sort([5, 15, 37, 25, 79])\n", "comb_sort([41, 32, 15, 19, 22])\n", "comb_sort([99, 15, 13, 47])\n"]}
{"task_id": "DREval/217", "code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    sdict = {}\n    pset = set()\n    sset = set()\n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False\n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i + 1]:\n                return False\n\n    return True\n", "entry_point": "is_samepatterns", "inputs": ["([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])", "([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])", "([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])"], "outputs": [true, false, false], "innvocations": ["is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n", "is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n", "is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n"]}
{"task_id": "DREval/219", "code": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n", "entry_point": "count_Squares", "inputs": ["(4,3)", "(2,2)", "(1,1)"], "outputs": [20.0, 5.0, 1.0], "innvocations": ["count_Squares(4, 3)\n", "count_Squares(2, 2)\n", "count_Squares(1, 1)\n"]}
{"task_id": "DREval/221", "code": "def count_With_Odd_SetBits(n):\n    if n % 2 != 0:\n        return (n + 1) / 2\n    count = bin(n).count(\"1\")\n    ans = n / 2\n    if count % 2 != 0:\n        ans += 1\n    return ans\n", "entry_point": "count_With_Odd_SetBits", "inputs": ["(5,)", "(10,)", "(15,)"], "outputs": [3.0, 5.0, 8.0], "innvocations": ["count_With_Odd_SetBits(5)\n", "count_With_Odd_SetBits(10)\n", "count_With_Odd_SetBits(15)\n"]}
{"task_id": "DREval/222", "code": "def word_len(s):\n    s = s.split(\" \")\n    for word in s:\n        if len(word) % 2 != 0:\n            return True\n        else:\n            return False\n", "entry_point": "word_len", "inputs": ["[(\"Hadoop\"),]", "[(\"great\"),]", "[(\"structure\"),]"], "outputs": [false, true, true], "innvocations": ["word_len(\"Hadoop\")\n", "word_len(\"great\")\n", "word_len(\"structure\")\n"]}
{"task_id": "DREval/224", "code": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n    for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)]))\n    return res\n", "entry_point": "zip_tuples", "inputs": ["((7, 8, 4, 5, 9, 10),(1, 5, 6) )", "((8, 9, 5, 6, 10, 11),(2, 6, 7) )", "((9, 10, 6, 7, 11, 12),(3, 7, 8) )"], "outputs": [[[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]], [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]], [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]], "innvocations": ["zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))\n", "zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))\n", "zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))\n"]}
{"task_id": "DREval/225", "code": "import math\n\n\ndef volume_sphere(r):\n    volume = (4 / 3) * math.pi * r * r * r\n    return volume\n", "entry_point": "volume_sphere", "inputs": ["(10,)", "(25,)", "(20,)"], "outputs": [4188.790204786391, 65449.84694978735, 33510.32163829113], "innvocations": ["volume_sphere(10)\n", "volume_sphere(25)\n", "volume_sphere(20)\n"]}
{"task_id": "DREval/226", "code": "def get_Char(strr):\n    summ = 0\n    for i in range(len(strr)):\n        summ += ord(strr[i]) - ord(\"a\") + 1\n    if summ % 26 == 0:\n        return ord(\"z\")\n    else:\n        summ = summ % 26\n        return chr(ord(\"a\") + summ - 1)\n", "entry_point": "get_Char", "inputs": ["[(\"abc\"),]", "[(\"gfg\"),]", "[(\"ab\"),]"], "outputs": ["f", "t", "c"], "innvocations": ["get_Char(\"abc\")\n", "get_Char(\"gfg\")\n", "get_Char(\"ab\")\n"]}
{"task_id": "DREval/228", "code": "import math\n\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r * r\n    return surfacearea\n", "entry_point": "surfacearea_sphere", "inputs": ["(10,)", "(15,)", "(20,)"], "outputs": [1256.6370614359173, 2827.4333882308138, 5026.548245743669], "innvocations": ["surfacearea_sphere(10)\n", "surfacearea_sphere(15)\n", "surfacearea_sphere(20)\n"]}
{"task_id": "DREval/230", "code": "import collections as ct\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2, dict3))\n    return merged_dict\n", "entry_point": "merge_dictionaries_three", "inputs": ["({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })", "({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})", "({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })"], "outputs": [{"O": "Orange", "W": "White", "B": "Black", "G": "Green", "R": "Red", "P": "Pink"}, {"L": "lavender", "B": "Black", "G": "Green", "W": "White", "R": "Red", "P": "Pink"}, {"G": "Green", "W": "White", "L": "lavender", "B": "Black", "R": "Red", "P": "Pink"}], "innvocations": ["merge_dictionaries_three(\n    {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}\n)\n", "merge_dictionaries_three(\n    {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}\n)\n", "merge_dictionaries_three(\n    {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}, {\"G\": \"Green\", \"W\": \"White\"}\n)\n"]}
{"task_id": "DREval/231", "code": "import collections\n\n\ndef freq_count(list1):\n    freq_count = collections.Counter(list1)\n    return freq_count\n", "entry_point": "freq_count", "inputs": ["[([10,10,10,10,20,20,20,20,40,40,50,50,30]),]", "[([1,2,3,4,3,2,4,1,3,1,4]),]", "[([5,6,7,4,9,10,4,5,6,7,9,5]),]"], "outputs": [{"10": 4, "20": 4, "40": 2, "50": 2, "30": 1}, {"1": 3, "2": 2, "3": 3, "4": 3}, {"5": 3, "6": 2, "7": 2, "4": 2, "9": 2, "10": 1}], "innvocations": ["freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n", "freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n", "freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n"]}
{"task_id": "DREval/233", "code": "def len_log(list1):\n    max = len(list1[0])\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n", "entry_point": "len_log", "inputs": ["[([\"python\",\"PHP\",\"bigdata\"]),]", "[([\"a\",\"ab\",\"abc\"]),]", "[([\"small\",\"big\",\"tall\"]),]"], "outputs": [7, 3, 5], "innvocations": ["len_log([\"python\", \"PHP\", \"bigdata\"])\n", "len_log([\"a\", \"ab\", \"abc\"])\n", "len_log([\"small\", \"big\", \"tall\"])\n"]}
{"task_id": "DREval/236", "code": "def power(a, b):\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n", "entry_point": "power", "inputs": ["(3,4)", "(2,3)", "(5,5)"], "outputs": [81, 8, 3125], "innvocations": ["power(3, 4)\n", "power(2, 3)\n", "power(5, 5)\n"]}
{"task_id": "DREval/237", "code": "from operator import itemgetter\n\n\ndef index_minimum(test_list):\n    res = min(test_list, key=itemgetter(1))[0]\n    return res\n", "entry_point": "index_minimum", "inputs": ["[([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]),]", "[([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]),]", "[([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]),]"], "outputs": ["Varsha", "Dawood", "Ayesha"], "innvocations": ["index_minimum([(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)])\n", "index_minimum([(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)])\n", "index_minimum([(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)])\n"]}
{"task_id": "DREval/238", "code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst)\n    return minLength\n", "entry_point": "Find_Min_Length", "inputs": ["[([[1],[1,2]]),]", "[([[1,2],[1,2,3],[1,2,3,4]]),]", "[([[3,3,3],[4,4,4,4]]),]"], "outputs": [1, 2, 3], "innvocations": ["Find_Min_Length([[1], [1, 2]])\n", "Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n", "Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]])\n"]}
{"task_id": "DREval/239", "code": "def divisor(n):\n    for i in range(n):\n        x = len([i for i in range(1, n + 1) if not n % i])\n    return x\n", "entry_point": "divisor", "inputs": ["(15,)", "(12,)", "(9,)"], "outputs": [4, 6, 3], "innvocations": ["divisor(15)\n", "divisor(12)\n", "divisor(9)\n"]}
{"task_id": "DREval/240", "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "entry_point": "frequency_lists", "inputs": ["[([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),]", "[([[1,2,3,4],[5,6,7,8],[9,10,11,12]]),]", "[([[20,30,40,17],[18,16,14,13],[10,20,30,40]]),]"], "outputs": [{"1": 1, "2": 3, "3": 1, "4": 1, "5": 2, "6": 1, "7": 1, "8": 1, "9": 1}, {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1}, {"20": 2, "30": 2, "40": 2, "17": 1, "18": 1, "16": 1, "14": 1, "13": 1, "10": 1}], "innvocations": ["frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n", "frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n", "frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n"]}
{"task_id": "DREval/241", "code": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n", "entry_point": "multiply_num", "inputs": ["[((8, 2, 3, -1, 7)),]", "[((-10,-20,-30)),]", "[((19,15,18)),]"], "outputs": [-67.2, -2000.0, 1710.0], "innvocations": ["multiply_num((8, 2, 3, -1, 7))\n", "multiply_num((-10, -20, -30))\n", "multiply_num((19, 15, 18))\n"]}
{"task_id": "DREval/243", "code": "import sys\n\n\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num + 1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n", "entry_point": "next_smallest_palindrome", "inputs": ["(99,)", "(1221,)", "(120,)"], "outputs": [101, 1331, 121], "innvocations": ["next_smallest_palindrome(99)\n", "next_smallest_palindrome(1221)\n", "next_smallest_palindrome(120)\n"]}
{"task_id": "DREval/247", "code": "def sort_sublists(input_list):\n    result = [sorted(x, key=lambda x: x[0]) for x in input_list]\n    return result\n", "entry_point": "sort_sublists", "inputs": ["[(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])),]", "[(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"])),]", "[(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"])),]"], "outputs": [[["green", "orange"], ["black", "white"], ["black", "orange", "white"]], [[" red ", "green"], [" black", "blue "], [" orange", "brown"]], [["gold", "zilver"], ["aluminium", "magnesium"], ["bronze", "steel"]]], "innvocations": ["sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n", "sort_sublists(([\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]))\n", "sort_sublists(([\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]))\n"]}
{"task_id": "DREval/249", "code": "def add_lists(test_list, test_tup):\n    res = tuple(list(test_tup) + test_list)\n    return res\n", "entry_point": "add_lists", "inputs": ["([5, 6, 7], (9, 10))", "([6, 7, 8], (10, 11))", "([7, 8, 9], (11, 12))"], "outputs": [[9, 10, 5, 6, 7], [10, 11, 6, 7, 8], [11, 12, 7, 8, 9]], "innvocations": ["add_lists([5, 6, 7], (9, 10))\n", "add_lists([6, 7, 8], (10, 11))\n", "add_lists([7, 8, 9], (11, 12))\n"]}
{"task_id": "DREval/250", "code": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i >= 10 and i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count\n", "entry_point": "count_Hexadecimal", "inputs": ["(10,15)", "(2,4)", "(15,16)"], "outputs": [6, 0, 1], "innvocations": ["count_Hexadecimal(10, 15)\n", "count_Hexadecimal(2, 4)\n", "count_Hexadecimal(15, 16)\n"]}
{"task_id": "DREval/252", "code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(0, n):\n        if s[i] == \"1\":\n            count = count + 1\n    return count\n", "entry_point": "odd_Equivalent", "inputs": ["(\"011001\",6)", "(\"11011\",5)", "(\"1010\",4)"], "outputs": [3, 4, 2], "innvocations": ["odd_Equivalent(\"011001\", 6)\n", "odd_Equivalent(\"11011\", 5)\n", "odd_Equivalent(\"1010\", 4)\n"]}
{"task_id": "DREval/253", "code": "def extract_missing(test_list, strt_val, stop_val):\n    res = []\n    for sub in test_list:\n        if sub[0] > strt_val:\n            res.append((strt_val, sub[0]))\n            strt_val = sub[1]\n        if strt_val < stop_val:\n            res.append((strt_val, stop_val))\n    return res\n", "entry_point": "extract_missing", "inputs": ["([(6, 9), (15, 34), (48, 70)], 2, 100)", "([(7, 2), (15, 19), (38, 50)], 5, 60)", "([(7, 2), (15, 19), (38, 50)], 1, 52)"], "outputs": [[[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]], [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]], [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]], "innvocations": ["extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n", "extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)\n", "extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)\n"]}
{"task_id": "DREval/254", "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\n", "entry_point": "common_in_nested_lists", "inputs": ["[([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]),]", "[([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]),]", "[([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]),]"], "outputs": [[18, 12], [5, 23], [4]], "innvocations": ["common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n", "common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n", "common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n"]}
{"task_id": "DREval/256", "code": "def check_integer(text):\n    text = text.strip()\n    if len(text) < 1:\n        return None\n    else:\n        if all(text[i] in \"0123456789\" for i in range(len(text))):\n            return True\n        elif (text[0] in \"+-\") and all(text[i] in \"0123456789\" for i in range(1, len(text))):\n            return True\n        else:\n            return False\n", "entry_point": "check_integer", "inputs": ["[(\"python\"),]", "(\"1\")", "[(\"12345\"),]"], "outputs": [false, true, true], "innvocations": ["check_integer(\"python\")\n", "check_integer(\"1\")\n", "check_integer(\"12345\")\n"]}
{"task_id": "DREval/258", "code": "def empty_dit(list1):\n    empty_dit = all(not d for d in list1)\n    return empty_dit\n", "entry_point": "empty_dit", "inputs": ["[([{},{},{}]),]", "[([{1,2},{},{}]),]", "[({}),]"], "outputs": [true, false, true], "innvocations": ["empty_dit([{}, {}, {}])\n", "empty_dit([{1, 2}, {}, {}])\n", "empty_dit({})\n"]}
{"task_id": "DREval/259", "code": "def tuple_to_int(nums):\n    result = int(\"\".join(map(str, nums)))\n    return result\n", "entry_point": "tuple_to_int", "inputs": ["[((1,2,3)),]", "[((4,5,6)),]", "[((5,6,7)),]"], "outputs": [123, 456, 567], "innvocations": ["tuple_to_int((1, 2, 3))\n", "tuple_to_int((4, 5, 6))\n", "tuple_to_int((5, 6, 7))\n"]}
{"task_id": "DREval/260", "code": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele.isalpha():\n                temp.append(ele)\n            else:\n                temp.append(float(ele))\n        res.append((temp[0], temp[1]))\n    return str(res)\n", "entry_point": "list_to_float", "inputs": ["[( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ),]", "[( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ),]", "[( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ),]"], "outputs": ["[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "innvocations": ["list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")])\n", "list_to_float([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")])\n", "list_to_float([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")])\n"]}
{"task_id": "DREval/261", "code": "def string_to_list(string):\n    lst = list(string.split(\" \"))\n    return lst\n", "entry_point": "string_to_list", "inputs": ["[(\"python programming\"),]", "[(\"lists tuples strings\"),]", "[(\"write a program\"),]"], "outputs": [["python", "programming"], ["lists", "tuples", "strings"], ["write", "a", "program"]], "innvocations": ["string_to_list(\"python programming\")\n", "string_to_list(\"lists tuples strings\")\n", "string_to_list(\"write a program\")\n"]}
{"task_id": "DREval/262", "code": "def search(arr, n):\n    XOR = 0\n    for i in range(n):\n        XOR = XOR ^ arr[i]\n    return XOR\n", "entry_point": "search", "inputs": ["([1,1,2,2,3],5)", "([1,1,3,3,4,4,5,5,7,7,8],11)", "([1,2,2,3,3,4,4],7)"], "outputs": [3, 8, 1], "innvocations": ["search([1, 1, 2, 2, 3], 5)\n", "search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n", "search([1, 2, 2, 3, 3, 4, 4], 7)\n"]}
{"task_id": "DREval/263", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1])\n    return result_max\n", "entry_point": "max_product_tuple", "inputs": ["[([(2, 7), (2, 6), (1, 8), (4, 9)] ),]", "[([(10,20), (15,2), (5,10)] ),]", "[([(11,44), (10,15), (20,5), (12, 9)] ),]"], "outputs": [36, 200, 484], "innvocations": ["max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n", "max_product_tuple([(10, 20), (15, 2), (5, 10)])\n", "max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n"]}
{"task_id": "DREval/267", "code": "import cmath\n\n\ndef angle_complex(a, b):\n    cn = complex(a, b)\n    angle = cmath.phase(a + b)\n    return angle\n", "entry_point": "angle_complex", "inputs": ["(0,1j)", "(2,1j)", "(0,2j)"], "outputs": [1.5707963267948966, 0.4636476090008061, 1.5707963267948966], "innvocations": ["angle_complex(0, 1j)\n", "angle_complex(2, 1j)\n", "angle_complex(0, 2j)\n"]}
{"task_id": "DREval/268", "code": "def find_length(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == \"0\" else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n", "entry_point": "find_length", "inputs": ["(\"11000010001\", 11)", "(\"10111\", 5)", "(\"11011101100101\", 14)"], "outputs": [6, 1, 2], "innvocations": ["find_length(\"11000010001\", 11)\n", "find_length(\"10111\", 5)\n", "find_length(\"11011101100101\", 14)\n"]}
{"task_id": "DREval/269", "code": "def sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n", "entry_point": "sum", "inputs": ["(10,15)", "(100,150)", "(4,6)"], "outputs": [6, 93, 3], "innvocations": ["sum(10, 15)\n", "sum(100, 150)\n", "sum(4, 6)\n"]}
{"task_id": "DREval/270", "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n", "entry_point": "multiply_int", "inputs": ["(10,20)", "(5,10)", "(4,8)"], "outputs": [200, 50, 32], "innvocations": ["multiply_int(10, 20)\n", "multiply_int(5, 10)\n", "multiply_int(4, 8)\n"]}
{"task_id": "DREval/271", "code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\n", "entry_point": "long_words", "inputs": ["(3,\"python is a programming language\")", "(2,\"writing a program\")", "(5,\"sorting list\")"], "outputs": [["python", "programming", "language"], ["writing", "program"], ["sorting"]], "innvocations": ["long_words(3, \"python is a programming language\")\n", "long_words(2, \"writing a program\")\n", "long_words(5, \"sorting list\")\n"]}
{"task_id": "DREval/273", "code": "from collections import defaultdict\n\n\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result\n", "entry_point": "max_occurrences", "inputs": ["[([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]),]", "[([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18]),]", "[([10,20,20,30,40,90,80,50,30,20,50,10]),]"], "outputs": [[2, 5], [8, 2], [20, 3]], "innvocations": ["max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n", "max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n", "max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n"]}
{"task_id": "DREval/274", "code": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    return result_string\n", "entry_point": "reverse_vowels", "inputs": ["[(\"Python\"),]", "[(\"USA\"),]", "[(\"ab\"),]"], "outputs": ["Python", "ASU", "ab"], "innvocations": ["reverse_vowels(\"Python\")\n", "reverse_vowels(\"USA\")\n", "reverse_vowels(\"ab\")\n"]}
{"task_id": "DREval/275", "code": "def tup_string(tup1):\n    str = \"\".join(tup1)\n    return str\n", "entry_point": "tup_string", "inputs": ["[(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')),]", "[(('p','y','t','h','o','n')),]", "[(('p','r','o','g','r','a','m')),]"], "outputs": ["exercises", "python", "program"], "innvocations": ["tup_string((\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))\n", "tup_string((\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))\n", "tup_string((\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))\n"]}
{"task_id": "DREval/277", "code": "def check_last(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum = _sum + arr[i]\n    if p == 1:\n        if _sum % 2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    return \"EVEN\"\n", "entry_point": "check_last", "inputs": ["([5,7,10],3,1)", "([2,3],2,3)", "([1,2,3],3,1)"], "outputs": ["ODD", "EVEN", "ODD"], "innvocations": ["check_last([5, 7, 10], 3, 1)\n", "check_last([2, 3], 2, 3)\n", "check_last([1, 2, 3], 3, 1)\n"]}
{"task_id": "DREval/279", "code": "def cal_electbill(units):\n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    total = amount + surcharge\n    return total\n", "entry_point": "cal_electbill", "inputs": ["(75,)", "(265,)", "(100,)"], "outputs": [246.25, 1442.75, 327.5], "innvocations": ["cal_electbill(75)\n", "cal_electbill(265)\n", "cal_electbill(100)\n"]}
{"task_id": "DREval/280", "code": "from array import array\n\n\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "entry_point": "zero_count", "inputs": ["[([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]),]", "[([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),]", "[([2, 4, -6, -9, 11, -12, 14, -5, 17]),]"], "outputs": [0.15, 0.0, 0.0], "innvocations": ["zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n", "zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n", "zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n"]}
{"task_id": "DREval/282", "code": "def circle_circumference(r):\n    perimeter = 2 * 3.1415 * r\n    return perimeter\n", "entry_point": "circle_circumference", "inputs": ["(10,)", "(5,)", "(4,)"], "outputs": [62.830000000000005, 31.415000000000003, 25.132], "innvocations": ["circle_circumference(10)\n", "circle_circumference(5)\n", "circle_circumference(4)\n"]}
{"task_id": "DREval/283", "code": "def extract_singly(test_list):\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if not ele in temp:\n                temp.add(ele)\n                res.append(ele)\n    return res\n", "entry_point": "extract_singly", "inputs": ["[([(3, 4, 5), (4, 5, 7), (1, 4)]),]", "[([(1, 2, 3), (4, 2, 3), (7, 8)]),]", "[([(7, 8, 9), (10, 11, 12), (10, 11)]),]"], "outputs": [[3, 4, 5, 7, 1], [1, 2, 3, 4, 7, 8], [7, 8, 9, 10, 11, 12]], "innvocations": ["extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n", "extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\n", "extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\n"]}
{"task_id": "DREval/284", "code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi + 1 : len(nums)]\n        nums = nums[arr_len - 1 :: -1] + nums[arr_len : len(nums)]\n        arr_len -= 1\n    return nums\n", "entry_point": "pancake_sort", "inputs": ["[([15, 79, 25, 38, 69]),]", "[([98, 12, 54, 36, 85]),]", "[([41, 42, 32, 12, 23]),]"], "outputs": [[15, 25, 38, 69, 79], [12, 36, 54, 85, 98], [12, 23, 32, 41, 42]], "innvocations": ["pancake_sort([15, 79, 25, 38, 69])\n", "pancake_sort([98, 12, 54, 36, 85])\n", "pancake_sort([41, 42, 32, 12, 23])\n"]}
{"task_id": "DREval/287", "code": "def sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    return sum\n", "entry_point": "sum_Pairs", "inputs": ["([1,8,9,15,16],5)", "([1,2,3,4],4)", "([1,2,3,4,5,7,9,11,14],9)"], "outputs": [74, 10, 188], "innvocations": ["sum_Pairs([1, 8, 9, 15, 16], 5)\n", "sum_Pairs([1, 2, 3, 4], 4)\n", "sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n"]}
{"task_id": "DREval/288", "code": "def max_Abs_Diff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return maxEle - minEle\n", "entry_point": "max_Abs_Diff", "inputs": ["((2,1,5,3),4)", "((9,3,2,5,1),5)", "((3,2,1),3)"], "outputs": [4, 8, 2], "innvocations": ["max_Abs_Diff((2, 1, 5, 3), 4)\n", "max_Abs_Diff((9, 3, 2, 5, 1), 5)\n", "max_Abs_Diff((3, 2, 1), 3)\n"]}
{"task_id": "DREval/290", "code": "def max_path_sum(tri, m, n):\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            if tri[i + 1][j] > tri[i + 1][j + 1]:\n                tri[i][j] += tri[i + 1][j]\n            else:\n                tri[i][j] += tri[i + 1][j + 1]\n    return tri[0][0]\n", "entry_point": "max_path_sum", "inputs": ["([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)", "([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)", "([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)"], "outputs": [14, 24, 53], "innvocations": ["max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n", "max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n", "max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n"]}
{"task_id": "DREval/291", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\n\ndef closest(x):\n    ans = 0\n    while ans * 10 + 9 <= x:\n        ans = ans * 10 + 9\n    return ans\n\n\ndef sum_digits_twoparts(N):\n    A = closest(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)\n", "entry_point": "sum_digits_twoparts", "inputs": ["(35,)", "(7,)", "(100,)"], "outputs": [17, 7, 19], "innvocations": ["sum_digits_twoparts(35)\n", "sum_digits_twoparts(7)\n", "sum_digits_twoparts(100)\n"]}
{"task_id": "DREval/292", "code": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if (arr[i] == arr[j] + 1) or (arr[i] == arr[j] - 1):\n                dp[i] = max(dp[i], dp[j] + 1)\n    result = 1\n    for i in range(n):\n        if result < dp[i]:\n            result = dp[i]\n    return result\n", "entry_point": "longest_subseq_with_diff_one", "inputs": ["([1, 2, 3, 4, 5, 3, 2], 7)", "([10, 9, 4, 5, 4, 8, 6], 7)", "([1, 2, 3, 2, 3, 7, 2, 1], 8)"], "outputs": [6, 3, 7], "innvocations": ["longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n", "longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)\n", "longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)\n"]}
{"task_id": "DREval/294", "code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\n", "entry_point": "is_coprime", "inputs": ["(17,13)", "(15,21)", "(25,45)"], "outputs": [true, false, false], "innvocations": ["is_coprime(17, 13)\n", "is_coprime(15, 21)\n", "is_coprime(25, 45)\n"]}
{"task_id": "DREval/295", "code": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\n\n\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n", "entry_point": "merge_sort", "inputs": ["[([3, 4, 2, 6, 5, 7, 1, 9]),]", "[([7, 25, 45, 78, 11, 33, 19]),]", "[([3, 1, 4, 9, 8]),]"], "outputs": [[1, 2, 3, 4, 5, 6, 7, 9], [7, 11, 19, 25, 33, 45, 78], [1, 3, 4, 8, 9]], "innvocations": ["merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n", "merge_sort([7, 25, 45, 78, 11, 33, 19])\n", "merge_sort([3, 1, 4, 9, 8])\n"]}
{"task_id": "DREval/296", "code": "def parabola_vertex(a, b, c):\n    vertex = ((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a)))\n    return vertex\n", "entry_point": "parabola_vertex", "inputs": ["(5,3,2)", "(9,8,4)", "(2,4,6)"], "outputs": [[-0.3, 1.55], [-0.4444444444444444, 2.2222222222222223], [-1.0, 4.0]], "innvocations": ["parabola_vertex(5, 3, 2)\n", "parabola_vertex(9, 8, 4)\n", "parabola_vertex(2, 4, 6)\n"]}
{"task_id": "DREval/297", "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "entry_point": "specified_element", "inputs": ["([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)", "([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)", "([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)"], "outputs": [[1, 4, 7], [3, 6, 9], [2, 2, 5]], "innvocations": ["specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n", "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n", "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n"]}
{"task_id": "DREval/298", "code": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n", "entry_point": "even_bit_toggle_number", "inputs": ["(10,)", "(20,)", "(30,)"], "outputs": [0, 30, 20], "innvocations": ["even_bit_toggle_number(10)\n", "even_bit_toggle_number(20)\n", "even_bit_toggle_number(30)\n"]}
{"task_id": "DREval/299", "code": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n", "entry_point": "tuple_int_str", "inputs": ["[((('333', '33'), ('1416', '55'))),]", "[((('999', '99'), ('1000', '500'))),]", "[((('666', '66'), ('1500', '555'))),]"], "outputs": [[[333, 33], [1416, 55]], [[999, 99], [1000, 500]], [[666, 66], [1500, 555]]], "innvocations": ["tuple_int_str(((\"333\", \"33\"), (\"1416\", \"55\")))\n", "tuple_int_str(((\"999\", \"99\"), (\"1000\", \"500\")))\n", "tuple_int_str(((\"666\", \"66\"), (\"1500\", \"555\")))\n"]}
{"task_id": "DREval/301", "code": "def min_Ops(arr, n, k):\n    max1 = max(arr)\n    res = 0\n    for i in range(0, n):\n        if (max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += (max1 - arr[i]) / k\n    return int(res)\n", "entry_point": "min_Ops", "inputs": ["([2,2,2,2],4,3)", "([4,2,6,8],4,3)", "([21,33,9,45,63],5,6)"], "outputs": [0, -1, 24], "innvocations": ["min_Ops([2, 2, 2, 2], 4, 3)\n", "min_Ops([4, 2, 6, 8], 4, 3)\n", "min_Ops([21, 33, 9, 45, 63], 5, 6)\n"]}
{"task_id": "DREval/302", "code": "def month_season(month, days):\n    if month in (\"January\", \"February\", \"March\"):\n        season = \"winter\"\n    elif month in (\"April\", \"May\", \"June\"):\n        season = \"spring\"\n    elif month in (\"July\", \"August\", \"September\"):\n        season = \"summer\"\n    else:\n        season = \"autumn\"\n    if (month == \"March\") and (days > 19):\n        season = \"spring\"\n    elif (month == \"June\") and (days > 20):\n        season = \"summer\"\n    elif (month == \"September\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"October\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"November\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"December\") and (days > 20):\n        season = \"winter\"\n    return season\n", "entry_point": "month_season", "inputs": ["('January',4)", "('October',28)", "('June',6)"], "outputs": ["winter", "autumn", "spring"], "innvocations": ["month_season(\"January\", 4)\n", "month_season(\"October\", 28)\n", "month_season(\"June\", 6)\n"]}
{"task_id": "DREval/303", "code": "def solution(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (\"x = \", i, \", y = \", int((n - (i * a)) / b))\n            return 0\n        i = i + 1\n    return \"No solution\"\n", "entry_point": "solution", "inputs": ["(2, 3, 7)", "(4, 2, 7)", "(1, 13, 17)"], "outputs": [["x = ", 2, ", y = ", 1], "No solution", ["x = ", 4, ", y = ", 1]], "innvocations": ["solution(2, 3, 7)\n", "solution(4, 2, 7)\n", "solution(1, 13, 17)\n"]}
{"task_id": "DREval/304", "code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\n", "entry_point": "remove_elements", "inputs": ["([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])", "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])", "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])"], "outputs": [[1, 3, 5, 7, 9, 10], [2, 4, 6, 8, 9, 10], [1, 2, 3, 4, 6, 8, 9, 10]], "innvocations": ["remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n", "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n", "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n"]}
{"task_id": "DREval/306", "code": "from math import tan, pi\n\n\ndef area_polygon(s, l):\n    area = s * (l**2) / (4 * tan(pi / s))\n    return area\n", "entry_point": "area_polygon", "inputs": ["(4,20)", "(10,15)", "(9,7)"], "outputs": [400.00000000000006, 1731.1969896610804, 302.90938549487214], "innvocations": ["area_polygon(4, 20)\n", "area_polygon(10, 15)\n", "area_polygon(9, 7)\n"]}
{"task_id": "DREval/307", "code": "import math\n\n\ndef divSum(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + math.floor(n / i)\n        i += 1\n    return sum\n\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)\n", "entry_point": "areEquivalent", "inputs": ["(36,57)", "(2,4)", "(23,47)"], "outputs": [false, false, true], "innvocations": ["areEquivalent(36, 57)\n", "areEquivalent(2, 4)\n", "areEquivalent(23, 47)\n"]}
{"task_id": "DREval/308", "code": "def count_char_position(str1):\n    count_chars = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord(\"A\")) or (i == ord(str1[i]) - ord(\"a\")):\n            count_chars += 1\n    return count_chars\n", "entry_point": "count_char_position", "inputs": ["[(\"xbcefg\"),]", "[(\"ABcED\"),]", "[(\"AbgdeF\"),]"], "outputs": [2, 3, 5], "innvocations": ["count_char_position(\"xbcefg\")\n", "count_char_position(\"ABcED\")\n", "count_char_position(\"AbgdeF\")\n"]}
{"task_id": "DREval/309", "code": "def find_even_Pair(A, N):\n    evenPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                evenPair += 1\n    return evenPair\n", "entry_point": "find_even_Pair", "inputs": ["([5,4,7,2,1],5)", "([7,2,8,1,0,5,11],7)", "([1,2,3],3)"], "outputs": [4, 9, 1], "innvocations": ["find_even_Pair([5, 4, 7, 2, 1], 5)\n", "find_even_Pair([7, 2, 8, 1, 0, 5, 11], 7)\n", "find_even_Pair([1, 2, 3], 3)\n"]}
{"task_id": "DREval/310", "code": "def next_Power_Of_2(n):\n    count = 0\n    if n and not (n & (n - 1)):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n", "entry_point": "next_Power_Of_2", "inputs": ["(0,)", "(5,)", "(17,)"], "outputs": [1, 8, 32], "innvocations": ["next_Power_Of_2(0)\n", "next_Power_Of_2(5)\n", "next_Power_Of_2(17)\n"]}
{"task_id": "DREval/311", "code": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n", "entry_point": "frequency", "inputs": ["([1,2,3],4)", "([1,2,2,3,3,3,4],3)", "([0,1,2,3,1,2],1)"], "outputs": [0, 3, 2], "innvocations": ["frequency([1, 2, 3], 4)\n", "frequency([1, 2, 2, 3, 3, 3, 4], 3)\n", "frequency([0, 1, 2, 3, 1, 2], 1)\n"]}
{"task_id": "DREval/312", "code": "def get_pell(n):\n    if n <= 2:\n        return n\n    a = 1\n    b = 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b\n", "entry_point": "get_pell", "inputs": ["(4,)", "(7,)", "(8,)"], "outputs": [12, 169, 408], "innvocations": ["get_pell(4)\n", "get_pell(7)\n", "get_pell(8)\n"]}
{"task_id": "DREval/313", "code": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    for i in range(m, n + 1, 1):\n        sum_range += list1[i]\n    return sum_range\n", "entry_point": "sum_range_list", "inputs": ["( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)", "( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)", "( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)"], "outputs": [29, 16, 38], "innvocations": ["sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n", "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n", "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n"]}
{"task_id": "DREval/314", "code": "import math\n\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n", "entry_point": "perimeter_pentagon", "inputs": ["(5,)", "(10,)", "(15,)"], "outputs": [25, 50, 75], "innvocations": ["perimeter_pentagon(5)\n", "perimeter_pentagon(10)\n", "perimeter_pentagon(15)\n"]}
{"task_id": "DREval/315", "code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\" and s[i + 1] == \"t\" and s[i + 2] == \"d\":\n            count = count + 1\n    return count\n", "entry_point": "count_occurance", "inputs": ["[(\"letstdlenstdporstd\"),]", "[(\"truststdsolensporsd\"),]", "[(\"makestdsostdworthit\"),]"], "outputs": [3, 1, 2], "innvocations": ["count_occurance(\"letstdlenstdporstd\")\n", "count_occurance(\"truststdsolensporsd\")\n", "count_occurance(\"makestdsostdworthit\")\n"]}
{"task_id": "DREval/317", "code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    return result\n", "entry_point": "group_keyvalue", "inputs": ["[([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]),]", "[([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)]),]", "[([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)]),]"], "outputs": [{"yellow": [1, 3], "blue": [2, 4], "red": [1]}, {"python": [1, 2, 3, 4, 5]}, {"yellow": [100, 300], "blue": [200, 400], "red": [100]}], "innvocations": ["group_keyvalue([(\"yellow\", 1), (\"blue\", 2), (\"yellow\", 3), (\"blue\", 4), (\"red\", 1)])\n", "group_keyvalue([(\"python\", 1), (\"python\", 2), (\"python\", 3), (\"python\", 4), (\"python\", 5)])\n", "group_keyvalue([(\"yellow\", 100), (\"blue\", 200), (\"yellow\", 300), (\"blue\", 400), (\"red\", 100)])\n"]}
{"task_id": "DREval/318", "code": "def is_valid_parenthese(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthese in str1:\n        if parenthese in pchar:\n            stack.append(parenthese)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n            return False\n    return len(stack) == 0\n", "entry_point": "is_valid_parenthese", "inputs": ["[(\"(){}[]\"),]", "[(\"()[{)}\"),]", "[(\"()\"),]"], "outputs": [true, false, true], "innvocations": ["is_valid_parenthese(\"(){}[]\")\n", "is_valid_parenthese(\"()[{)}\")\n", "is_valid_parenthese(\"()\")\n"]}
{"task_id": "DREval/319", "code": "def perimeter_triangle(a, b, c):\n    perimeter = a + b + c\n    return perimeter\n", "entry_point": "perimeter_triangle", "inputs": ["(10,20,30)", "(3,4,5)", "(25,35,45)"], "outputs": [60, 12, 105], "innvocations": ["perimeter_triangle(10, 20, 30)\n", "perimeter_triangle(3, 4, 5)\n", "perimeter_triangle(25, 35, 45)\n"]}
{"task_id": "DREval/320", "code": "def answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    else:\n        return -1\n", "entry_point": "answer", "inputs": ["(3,8)", "(2,6)", "(1,3)"], "outputs": [[3, 6], [2, 4], [1, 2]], "innvocations": ["answer(3, 8)\n", "answer(2, 6)\n", "answer(1, 3)\n"]}
{"task_id": "DREval/322", "code": "def is_num_keith(x):\n    terms = []\n    temp = x\n    n = 0\n    while temp > 0:\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while next_term < x:\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return next_term == x\n", "entry_point": "is_num_keith", "inputs": ["(14,)", "(12,)", "(197,)"], "outputs": [true, false, true], "innvocations": ["is_num_keith(14)\n", "is_num_keith(12)\n", "is_num_keith(197)\n"]}
{"task_id": "DREval/323", "code": "from math import radians, sin, cos, acos\n\n\ndef distance_lat_long(slat, slon, elat, elon):\n    dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))\n    return dist\n", "entry_point": "distance_lat_long", "inputs": ["(23.5,67.5,25.5,69.5)", "(10.5,20.5,30.5,40.5)", "(10,20,30,40)"], "outputs": [12179.372041317429, 6069.397933300514, 6783.751974994595], "innvocations": ["distance_lat_long(23.5, 67.5, 25.5, 69.5)\n", "distance_lat_long(10.5, 20.5, 30.5, 40.5)\n", "distance_lat_long(10, 20, 30, 40)\n"]}
{"task_id": "DREval/324", "code": "def common_prefix_util(str1, str2):\n    result = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix\n", "entry_point": "common_prefix", "inputs": ["([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)", "([\"apples\", \"ape\", \"april\"], 3)", "([\"teens\", \"teenager\", \"teenmar\"], 3)"], "outputs": ["ta", "ap", "teen"], "innvocations": ["common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n", "common_prefix([\"apples\", \"ape\", \"april\"], 3)\n", "common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n"]}
{"task_id": "DREval/325", "code": "import re\n\n\ndef find_character(string):\n    uppercase_characters = re.findall(r\"[A-Z]\", string)\n    lowercase_characters = re.findall(r\"[a-z]\", string)\n    numerical_characters = re.findall(r\"[0-9]\", string)\n    special_characters = re.findall(r\"[, .!?]\", string)\n    return uppercase_characters, lowercase_characters, numerical_characters, special_characters\n", "entry_point": "find_character", "inputs": ["[(\"ThisIsGeeksforGeeks\"),]", "[(\"Hithere2\"),]", "[(\"HeyFolks32\"),]"], "outputs": [[["T", "I", "G", "G"], ["h", "i", "s", "s", "e", "e", "k", "s", "f", "o", "r", "e", "e", "k", "s"], [], []], [["H"], ["i", "t", "h", "e", "r", "e"], ["2"], []], [["H", "F"], ["e", "y", "o", "l", "k", "s"], ["3", "2"], []]], "innvocations": ["find_character(\"ThisIsGeeksforGeeks\")\n", "find_character(\"Hithere2\")\n", "find_character(\"HeyFolks32\")\n"]}
{"task_id": "DREval/326", "code": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                count += 1\n    return count\n", "entry_point": "count_pairs", "inputs": ["([1, 5, 3, 4, 2], 5, 3)", "([8, 12, 16, 4, 0, 20], 6, 4)", "([2, 4, 1, 3, 4], 5, 2)"], "outputs": [2, 5, 3], "innvocations": ["count_pairs([1, 5, 3, 4, 2], 5, 3)\n", "count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n", "count_pairs([2, 4, 1, 3, 4], 5, 2)\n"]}
{"task_id": "DREval/327", "code": "def greater_specificnum(list, num):\n    greater_specificnum = all(x >= num for x in list)\n    return greater_specificnum\n", "entry_point": "greater_specificnum", "inputs": ["([220, 330, 500],200)", "([12, 17, 21],20)", "([1,2,3,4],10)"], "outputs": [true, false, false], "innvocations": ["greater_specificnum([220, 330, 500], 200)\n", "greater_specificnum([12, 17, 21], 20)\n", "greater_specificnum([1, 2, 3, 4], 10)\n"]}
{"task_id": "DREval/328", "code": "def parabola_focus(a, b, c):\n    focus = ((-b / (2 * a)), (((4 * a * c) - (b * b) + 1) / (4 * a)))\n    return focus\n", "entry_point": "parabola_focus", "inputs": ["(5,3,2)", "(9,8,4)", "(2,4,6)"], "outputs": [[-0.3, 1.6], [-0.4444444444444444, 2.25], [-1.0, 4.125]], "innvocations": ["parabola_focus(5, 3, 2)\n", "parabola_focus(9, 8, 4)\n", "parabola_focus(2, 4, 6)\n"]}
{"task_id": "DREval/332", "code": "def first_Missing_Positive(arr, n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return i + 1\n    return n + 1\n", "entry_point": "first_Missing_Positive", "inputs": ["([1,2,3,-1,5],5)", "([0,-1,-2,1,5,8],6)", "([0,1,2,5,-8],5)"], "outputs": [4, 2, 3], "innvocations": ["first_Missing_Positive([1, 2, 3, -1, 5], 5)\n", "first_Missing_Positive([0, -1, -2, 1, 5, 8], 6)\n", "first_Missing_Positive([0, 1, 2, 5, -8], 5)\n"]}
{"task_id": "DREval/336", "code": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res\n", "entry_point": "remove_tuple", "inputs": ["[((1, 3, 5, 2, 3, 5, 1, 1, 3)),]", "[((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)),]", "[((11, 12, 13, 11, 11, 12, 14, 13)),]"], "outputs": [[1, 2, 3, 5], [2, 3, 4, 5, 6, 7, 8], [11, 12, 13, 14]], "innvocations": ["remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n", "remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n", "remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))\n"]}
{"task_id": "DREval/337", "code": "def octal_To_Decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n", "entry_point": "octal_To_Decimal", "inputs": ["(25,)", "(30,)", "(40,)"], "outputs": [21, 24, 32], "innvocations": ["octal_To_Decimal(25)\n", "octal_To_Decimal(30)\n", "octal_To_Decimal(40)\n"]}
{"task_id": "DREval/338", "code": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n", "entry_point": "first", "inputs": ["([1,2,3,4,5,6,6],6,6)", "([1,2,2,2,3,2,2,4,2],2,9)", "([1,2,3],1,3)"], "outputs": [5, 1, 0], "innvocations": ["first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n", "first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n", "first([1, 2, 3], 1, 3)\n"]}
{"task_id": "DREval/339", "code": "def remove_tuples(test_list, K):\n    res = [ele for ele in test_list if len(ele) != K]\n    return res\n", "entry_point": "remove_tuples", "inputs": ["([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)", "([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2)", "([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3)"], "outputs": [[[4, 5], [8, 6, 7], [3, 4, 6, 7]], [[1, 2, 3], [3, 4, 6, 7]], [[4, 3], [1]]], "innvocations": ["remove_tuples([(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)], 1)\n", "remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)\n", "remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1,), (3, 6, 7)], 3)\n"]}
{"task_id": "DREval/340", "code": "def find_exponentio(test_tup1, test_tup2):\n    res = tuple(ele1**ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "find_exponentio", "inputs": ["((10, 4, 5, 6), (5, 6, 7, 5))", "((11, 5, 6, 7), (6, 7, 8, 6))", "((12, 6, 7, 8), (7, 8, 9, 7))"], "outputs": [[100000, 4096, 78125, 7776], [1771561, 78125, 1679616, 117649], [35831808, 1679616, 40353607, 2097152]], "innvocations": ["find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n", "find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n", "find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))\n"]}
{"task_id": "DREval/341", "code": "import math\n\n\ndef largest_triangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b)\n    return area\n", "entry_point": "largest_triangle", "inputs": ["(4,2)", "(5,7)", "(9,1)"], "outputs": [10.392304845413264, 4.639421805988064, 105.2220865598093], "innvocations": ["largest_triangle(4, 2)\n", "largest_triangle(5, 7)\n", "largest_triangle(9, 1)\n"]}
{"task_id": "DREval/342", "code": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0:\n            res = i\n            break\n    return res\n", "entry_point": "highest_Power_of_2", "inputs": ["(10,)", "(19,)", "(32,)"], "outputs": [8, 16, 32], "innvocations": ["highest_Power_of_2(10)\n", "highest_Power_of_2(19)\n", "highest_Power_of_2(32)\n"]}
{"task_id": "DREval/343", "code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result\n", "entry_point": "position_max", "inputs": ["[([12,33,23,10,67,89,45,667,23,12,11,10,54]),]", "[([1,2,2,2,4,4,4,5,5,5,5]),]", "[([2,1,5,6,8,3,4,9,10,11,8,12]),]"], "outputs": [[7], [7, 8, 9, 10], [11]], "innvocations": ["position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n", "position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n", "position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n"]}
{"task_id": "DREval/345", "code": "def remove_even(str1):\n    str2 = \"\"\n    for i in range(1, len(str1) + 1):\n        if i % 2 != 0:\n            str2 = str2 + str1[i - 1]\n    return str2\n", "entry_point": "remove_even", "inputs": ["[(\"python\"),]", "[(\"program\"),]", "[(\"language\"),]"], "outputs": ["pto", "porm", "lnug"], "innvocations": ["remove_even(\"python\")\n", "remove_even(\"program\")\n", "remove_even(\"language\")\n"]}
{"task_id": "DREval/346", "code": "def hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    setBits = 0\n    while x > 0:\n        setBits += x & 1\n        x >>= 1\n    return setBits\n", "entry_point": "hamming_Distance", "inputs": ["(4,8)", "(2,4)", "(1,2)"], "outputs": [2, 2, 2], "innvocations": ["hamming_Distance(4, 8)\n", "hamming_Distance(2, 4)\n", "hamming_Distance(1, 2)\n"]}
{"task_id": "DREval/347", "code": "def count(s, c):\n    res = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            res = res + 1\n    return res\n", "entry_point": "count", "inputs": ["(\"abcc\",\"c\")", "(\"ababca\",\"a\")", "(\"mnmm0pm\",\"m\")"], "outputs": [2, 3, 4], "innvocations": ["count(\"abcc\", \"c\")\n", "count(\"ababca\", \"a\")\n", "count(\"mnmm0pm\", \"m\")\n"]}
{"task_id": "DREval/348", "code": "def inversion_elements(test_tup):\n    res = tuple(list(map(lambda x: ~x, list(test_tup))))\n    return res\n", "entry_point": "inversion_elements", "inputs": ["[((7, 8, 9, 1, 10, 7)),]", "[((2, 4, 5, 6, 1, 7)),]", "[((8, 9, 11, 14, 12, 13)),]"], "outputs": [[-8, -9, -10, -2, -11, -8], [-3, -5, -6, -7, -2, -8], [-9, -10, -12, -15, -13, -14]], "innvocations": ["inversion_elements((7, 8, 9, 1, 10, 7))\n", "inversion_elements((2, 4, 5, 6, 1, 7))\n", "inversion_elements((8, 9, 11, 14, 12, 13))\n"]}
{"task_id": "DREval/349", "code": "def concatenate_elements(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "entry_point": "concatenate_elements", "inputs": ["[((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")),]", "[((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")),]", "[((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")),]"], "outputs": [["DSP IS ", "IS BEST ", "BEST FOR ", "FOR ALL ", "ALL UTS"], ["RES IS ", "IS BEST ", "BEST FOR ", "FOR ALL ", "ALL QESR"], ["MSAMIS ", "IS BEST ", "BEST FOR ", "FOR ALL ", "ALL SKD"]], "innvocations": ["concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n", "concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"))\n", "concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"))\n"]}
{"task_id": "DREval/350", "code": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for k in range(n + 1)] for l in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[n][n]\n", "entry_point": "find_longest_repeating_subseq", "inputs": ["[(\"AABEBCDD\"),]", "[(\"aabb\"),]", "[(\"aab\"),]"], "outputs": [3, 2, 1], "innvocations": ["find_longest_repeating_subseq(\"AABEBCDD\")\n", "find_longest_repeating_subseq(\"aabb\")\n", "find_longest_repeating_subseq(\"aab\")\n"]}
{"task_id": "DREval/352", "code": "import heapq as hq\n\n\ndef heap_replace(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap\n", "entry_point": "heap_replace", "inputs": ["( [25, 44, 68, 21, 39, 23, 89],21)", "([25, 44, 68, 21, 39, 23, 89],110)", "([25, 44, 68, 21, 39, 23, 89],500)"], "outputs": [[21, 25, 23, 44, 39, 68, 89], [23, 25, 68, 44, 39, 110, 89], [23, 25, 68, 44, 39, 500, 89]], "innvocations": ["heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n", "heap_replace([25, 44, 68, 21, 39, 23, 89], 110)\n", "heap_replace([25, 44, 68, 21, 39, 23, 89], 500)\n"]}
{"task_id": "DREval/354", "code": "def count_Num(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count\n", "entry_point": "count_Num", "inputs": ["(2,)", "(3,)", "(1,)"], "outputs": [1, 2, 1], "innvocations": ["count_Num(2)\n", "count_Num(3)\n", "count_Num(1)\n"]}
{"task_id": "DREval/355", "code": "import math\n\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i * i)\n    return sum\n", "entry_point": "fourth_Power_Sum", "inputs": ["(2,)", "(4,)", "(6,)"], "outputs": [17, 354, 2275], "innvocations": ["fourth_Power_Sum(2)\n", "fourth_Power_Sum(4)\n", "fourth_Power_Sum(6)\n"]}
{"task_id": "DREval/356", "code": "def concatenate_strings(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "concatenate_strings", "inputs": ["((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))", "((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))", "((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))"], "outputs": [["Manjeet Singh", "Nikhil Meherwal", "Akshat Garg"], ["Shaik Dawood", "Ayesha Begum", "Sanya Singh"], ["HarpreetKour", "Priyanka Agarwal", "MuskanSethi"]], "innvocations": ["concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n", "concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))\n", "concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))\n"]}
{"task_id": "DREval/357", "code": "import math\n\n\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree\n", "entry_point": "degree_radian", "inputs": ["(90,)", "(60,)", "(120,)"], "outputs": [5156.620156177409, 3437.746770784939, 6875.493541569878], "innvocations": ["degree_radian(90)\n", "degree_radian(60)\n", "degree_radian(120)\n"]}
{"task_id": "DREval/359", "code": "def check_subset_list(list1, list2):\n    l1, l2 = list1[0], list2[0]\n    exist = True\n    for i in list2:\n        if i not in list1:\n            exist = False\n    return exist\n", "entry_point": "check_subset_list", "inputs": ["([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])", "([['a', 'b'], ['e'], ['c', 'd']],[['g']])"], "outputs": [false, true, false], "innvocations": ["check_subset_list(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n)\n", "check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n", "check_subset_list([[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]], [[\"g\"]])\n"]}
{"task_id": "DREval/360", "code": "def first_Repeated_Char(str):\n    h = {}\n    for ch in str:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return \"\\0\"\n", "entry_point": "first_Repeated_Char", "inputs": ["[(\"Google\"),]", "[(\"data\"),]", "[(\"python\"),]"], "outputs": ["o", "a", "\u0000"], "innvocations": ["first_Repeated_Char(\"Google\")\n", "first_Repeated_Char(\"data\")\n", "first_Repeated_Char(\"python\")\n"]}
{"task_id": "DREval/362", "code": "def extract_min_max(test_tup, K):\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n            res.append(val)\n    res = tuple(res)\n    return res\n", "entry_point": "extract_min_max", "inputs": ["((5, 20, 3, 7, 6, 8), 2)", "((4, 5, 6, 1, 2, 7), 3)", "((2, 3, 4, 8, 9, 11, 7), 4)"], "outputs": [[3, 5, 8, 20], [1, 2, 4, 5, 6, 7], [2, 3, 4, 7, 8, 9, 11]], "innvocations": ["extract_min_max((5, 20, 3, 7, 6, 8), 2)\n", "extract_min_max((4, 5, 6, 1, 2, 7), 3)\n", "extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)\n"]}
{"task_id": "DREval/364", "code": "def first_even(nums):\n    first_even = next((el for el in nums if el % 2 == 0), -1)\n    return first_even\n", "entry_point": "first_even", "inputs": ["[([1, 3, 5, 7, 4, 1, 6, 8]),]", "[([2, 3, 4]),]", "[([5, 6, 7]),]"], "outputs": [4, 2, 6], "innvocations": ["first_even([1, 3, 5, 7, 4, 1, 6, 8])\n", "first_even([2, 3, 4])\n", "first_even([5, 6, 7])\n"]}
{"task_id": "DREval/365", "code": "def check_type(test_tuple):\n    res = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            res = False\n            break\n    return res\n", "entry_point": "check_type", "inputs": ["[((5, 6, 7, 3, 5, 6) ),]", "[((1, 2, \"4\") ),]", "[((3, 2, 1, 4, 5) ),]"], "outputs": [true, false, true], "innvocations": ["check_type((5, 6, 7, 3, 5, 6))\n", "check_type((1, 2, \"4\"))\n", "check_type((3, 2, 1, 4, 5))\n"]}
{"task_id": "DREval/366", "code": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    if ((i + n // 2) <= (n - 1)) and arr[i + n // 2] == x:\n        return True\n    else:\n        return False\n\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n", "entry_point": "is_majority", "inputs": ["([1, 2, 3, 3, 3, 3, 10], 7, 3)", "([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)", "([1, 1, 1, 2, 2], 5, 1)"], "outputs": [true, false, true], "innvocations": ["is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n", "is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n", "is_majority([1, 1, 1, 2, 2], 5, 1)\n"]}
{"task_id": "DREval/367", "code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "entry_point": "count_Set_Bits", "inputs": ["(2,)", "(4,)", "(6,)"], "outputs": [1, 1, 2], "innvocations": ["count_Set_Bits(2)\n", "count_Set_Bits(4)\n", "count_Set_Bits(6)\n"]}
{"task_id": "DREval/368", "code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[high]\n", "entry_point": "find_Min", "inputs": ["([1,2,3,4,5],0,4)", "([4,6,8],0,2)", "([2,3,5,7,9],0,4)"], "outputs": [1, 4, 2], "innvocations": ["find_Min([1, 2, 3, 4, 5], 0, 4)\n", "find_Min([4, 6, 8], 0, 2)\n", "find_Min([2, 3, 5, 7, 9], 0, 4)\n"]}
{"task_id": "DREval/369", "code": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n", "entry_point": "odd_values_string", "inputs": ["[('abcdef'),]", "[('python'),]", "[('data'),]"], "outputs": ["ace", "pto", "dt"], "innvocations": ["odd_values_string(\"abcdef\")\n", "odd_values_string(\"python\")\n", "odd_values_string(\"data\")\n"]}
{"task_id": "DREval/370", "code": "def min_of_three(a, b, c):\n    if (a <= b) and (a <= c):\n        smallest = a\n    elif (b <= a) and (b <= c):\n        smallest = b\n    else:\n        smallest = c\n    return smallest\n", "entry_point": "min_of_three", "inputs": ["(10,20,0)", "(19,15,18)", "(-10,-20,-30)"], "outputs": [0, 15, -30], "innvocations": ["min_of_three(10, 20, 0)\n", "min_of_three(19, 15, 18)\n", "min_of_three(-10, -20, -30)\n"]}
{"task_id": "DREval/371", "code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if new_num == 0:\n        return True\n    return False\n", "entry_point": "all_Bits_Set_In_The_Given_Range", "inputs": ["(4,1,2)", "(17,2,4)", "(39,4,6)"], "outputs": [true, true, false], "innvocations": ["all_Bits_Set_In_The_Given_Range(4, 1, 2)\n", "all_Bits_Set_In_The_Given_Range(17, 2, 4)\n", "all_Bits_Set_In_The_Given_Range(39, 4, 6)\n"]}
{"task_id": "DREval/372", "code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j = j + 1\n    return arr\n", "entry_point": "re_arrange_array", "inputs": ["([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)", "([12, -14, -26, 13, 15], 5)", "([10, 24, 36, -42, -39, -78, 85], 7)"], "outputs": [[-1, -3, -7, 4, 5, 6, 2, 8, 9], [-14, -26, 12, 13, 15], [-42, -39, -78, 10, 24, 36, 85]], "innvocations": ["re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n", "re_arrange_array([12, -14, -26, 13, 15], 5)\n", "re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\n"]}
{"task_id": "DREval/373", "code": "def replace_blank(str1, char):\n    str2 = str1.replace(\" \", char)\n    return str2\n", "entry_point": "replace_blank", "inputs": ["(\"hello people\",'@')", "(\"python program language\",'$')", "(\"blank space\",\"-\")"], "outputs": ["hello@people", "python$program$language", "blank-space"], "innvocations": ["replace_blank(\"hello people\", \"@\")\n", "replace_blank(\"python program language\", \"$\")\n", "replace_blank(\"blank space\", \"-\")\n"]}
{"task_id": "DREval/374", "code": "def max_sum(tri, n):\n    if n > 1:\n        tri[1][1] = tri[1][1] + tri[0][0]\n        tri[1][0] = tri[1][0] + tri[0][0]\n    for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i - 1][0]\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]\n        for j in range(1, i):\n            if tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]:\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]\n            else:\n                tri[i][j] = tri[i][j] + tri[i - 1][j]\n    return max(tri[n - 1])\n", "entry_point": "max_sum", "inputs": ["([[1], [2,1], [3,3,2]], 3)", "([[1], [1, 2], [4, 1, 12]], 3)", "([[2], [3,2], [13,23,12]], 3)"], "outputs": [6, 15, 28], "innvocations": ["max_sum([[1], [2, 1], [3, 3, 2]], 3)\n", "max_sum([[1], [1, 2], [4, 1, 12]], 3)\n", "max_sum([[2], [3, 2], [13, 23, 12]], 3)\n"]}
{"task_id": "DREval/375", "code": "import heapq\n\n\ndef larg_nnum(list1, n):\n    largest = heapq.nlargest(n, list1)\n    return largest\n", "entry_point": "larg_nnum", "inputs": ["([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)", "([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)", "([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)"], "outputs": [[100, 90], [100, 90, 80, 70, 60], [100, 90, 80]], "innvocations": ["larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n", "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n", "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n"]}
{"task_id": "DREval/376", "code": "def lateralsuface_cylinder(r, h):\n    lateralsurface = 2 * 3.1415 * r * h\n    return lateralsurface\n", "entry_point": "lateralsuface_cylinder", "inputs": ["(10,5)", "(4,5)", "(4,10)"], "outputs": [314.15000000000003, 125.66000000000001, 251.32000000000002], "innvocations": ["lateralsuface_cylinder(10, 5)\n", "lateralsuface_cylinder(4, 5)\n", "lateralsuface_cylinder(4, 10)\n"]}
{"task_id": "DREval/377", "code": "def volume_cube(l):\n    volume = l * l * l\n    return volume\n", "entry_point": "volume_cube", "inputs": ["(3,)", "(2,)", "(5,)"], "outputs": [27, 8, 125], "innvocations": ["volume_cube(3)\n", "volume_cube(2)\n", "volume_cube(5)\n"]}
{"task_id": "DREval/378", "code": "def even_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "entry_point": "even_bit_set_number", "inputs": ["(10,)", "(20,)", "(30,)"], "outputs": [10, 30, 30], "innvocations": ["even_bit_set_number(10)\n", "even_bit_set_number(20)\n", "even_bit_set_number(30)\n"]}
{"task_id": "DREval/382", "code": "def get_total_number_of_sequences(m, n):\n    T = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif i < j:\n                T[i][j] = 0\n            elif j == 1:\n                T[i][j] = i\n            else:\n                T[i][j] = T[i - 1][j] + T[i // 2][j - 1]\n    return T[m][n]\n", "entry_point": "get_total_number_of_sequences", "inputs": ["(10, 4)", "(5, 2)", "(16, 3)"], "outputs": [4, 6, 84], "innvocations": ["get_total_number_of_sequences(10, 4)\n", "get_total_number_of_sequences(5, 2)\n", "get_total_number_of_sequences(16, 3)\n"]}
{"task_id": "DREval/383", "code": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    replace_list = list1\n    return replace_list\n", "entry_point": "replace_list", "inputs": ["([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])", "([1,2,3,4,5],[5,6,7,8])", "([\"red\",\"blue\",\"green\"],[\"yellow\"])"], "outputs": [[1, 3, 5, 7, 9, 2, 4, 6, 8], [1, 2, 3, 4, 5, 6, 7, 8], ["red", "blue", "yellow"]], "innvocations": ["replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n", "replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])\n", "replace_list([\"red\", \"blue\", \"green\"], [\"yellow\"])\n"]}
{"task_id": "DREval/384", "code": "def array_3d(m, n, o):\n    array_3d = [[[\"*\" for col in range(m)] for col in range(n)] for row in range(o)]\n    return array_3d\n", "entry_point": "array_3d", "inputs": ["(6,4,3)", "(5,3,4)", "(1,2,3)"], "outputsinnvocations": ["array_3d(6, 4, 3)\n", "array_3d(5, 3, 4)\n", "array_3d(1, 2, 3)\n"]}
{"task_id": "DREval/385", "code": "def count_charac(str1):\n    total = 0\n    for i in str1:\n        total = total + 1\n    return total\n", "entry_point": "count_charac", "inputs": ["[(\"python programming\"),]", "[(\"language\"),]", "[(\"words\"),]"], "outputs": [18, 8, 5], "innvocations": ["count_charac(\"python programming\")\n", "count_charac(\"language\")\n", "count_charac(\"words\")\n"]}
{"task_id": "DREval/386", "code": "def sort_on_occurence(lst):\n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    return [(i, *dict.fromkeys(j), len(j)) for i, j in dct.items()]\n", "entry_point": "sort_on_occurence", "inputs": ["[([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]),]", "[([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]),]", "[([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]),]"], "outputs": [[[1, "Jake", "Cara", 2], [2, "Bob", 1]], [["b", "ball", "b", 2], ["a", "arm", "ant", 2]], [[2, "Mark", "Sara", 2], [3, "Maze", 1]]], "innvocations": ["sort_on_occurence([(1, \"Jake\"), (2, \"Bob\"), (1, \"Cara\")])\n", "sort_on_occurence([(\"b\", \"ball\"), (\"a\", \"arm\"), (\"b\", \"b\"), (\"a\", \"ant\")])\n", "sort_on_occurence([(2, \"Mark\"), (3, \"Maze\"), (2, \"Sara\")])\n"]}
{"task_id": "DREval/388", "code": "def max_sum(arr, n):\n    MSIBS = arr[:]\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                MSIBS[i] = MSIBS[j] + arr[i]\n    MSDBS = arr[:]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:\n                MSDBS[-i] = MSDBS[-j] + arr[-i]\n    max_sum = float(\"-Inf\")\n    for i, j, k in zip(MSIBS, MSDBS, arr):\n        max_sum = max(max_sum, i + j - k)\n    return max_sum\n", "entry_point": "max_sum", "inputs": ["([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)", "([80, 60, 30, 40, 20, 10], 6)", "([2, 3 ,14, 16, 21, 23, 29, 30], 8)"], "outputs": [194, 210, 138], "innvocations": ["max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n", "max_sum([80, 60, 30, 40, 20, 10], 6)\n", "max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n"]}
{"task_id": "DREval/389", "code": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g\n", "entry_point": "babylonian_squareroot", "inputs": ["(10,)", "(2,)", "(9,)"], "outputs": [3.162277660168379, 1.414213562373095, 3.0], "innvocations": ["babylonian_squareroot(10)\n", "babylonian_squareroot(2)\n", "babylonian_squareroot(9)\n"]}
{"task_id": "DREval/390", "code": "def lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    return L[0][n - 1]\n", "entry_point": "lps", "inputs": ["[(\"TENS FOR TENS\"),]", "[(\"CARDIO FOR CARDS\"),]", "[(\"PART OF THE JOURNEY IS PART\"),]"], "outputs": [5, 7, 9], "innvocations": ["lps(\"TENS FOR TENS\")\n", "lps(\"CARDIO FOR CARDS\")\n", "lps(\"PART OF THE JOURNEY IS PART\")\n"]}
{"task_id": "DREval/392", "code": "def intersection_array(array_nums1, array_nums2):\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result\n", "entry_point": "intersection_array", "inputs": ["([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])", "([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])", "([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])"], "outputs": [[1, 2, 8, 9], [3, 5, 7, 9], [10]], "innvocations": ["intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n", "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n", "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n"]}
{"task_id": "DREval/393", "code": "def count_X(tup, x):\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count = count + 1\n    return count\n", "entry_point": "count_X", "inputs": ["((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)", "((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10)", "((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8)"], "outputs": [0, 3, 4], "innvocations": ["count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n", "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)\n", "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n"]}
{"task_id": "DREval/394", "code": "def insert_element(list, element):\n    list = [v for elt in list for v in (element, elt)]\n    return list\n", "entry_point": "insert_element", "inputs": ["(['Red', 'Green', 'Black'] ,'c')", "(['python', 'java'] ,'program')", "(['happy', 'sad'] ,'laugh')"], "outputs": [["c", "Red", "c", "Green", "c", "Black"], ["program", "python", "program", "java"], ["laugh", "happy", "laugh", "sad"]], "innvocations": ["insert_element([\"Red\", \"Green\", \"Black\"], \"c\")\n", "insert_element([\"python\", \"java\"], \"program\")\n", "insert_element([\"happy\", \"sad\"], \"laugh\")\n"]}
{"task_id": "DREval/395", "code": "import cmath\n\n\ndef convert(numbers):\n    num = cmath.polar(numbers)\n    return num\n", "entry_point": "convert", "inputs": ["(1,)", "(4,)", "(5,)"], "outputs": [[1.0, 0.0], [4.0, 0.0], [5.0, 0.0]], "innvocations": ["convert(1)\n", "convert(4)\n", "convert(5)\n"]}
{"task_id": "DREval/396", "code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\n", "entry_point": "count_integer", "inputs": ["[([1,2,'abc',1.2]),]", "[([1,2,3]),]", "[([1,1.2,4,5.1]),]"], "outputs": [2, 3, 2], "innvocations": ["count_integer([1, 2, \"abc\", 1.2])\n", "count_integer([1, 2, 3])\n", "count_integer([1, 1.2, 4, 5.1])\n"]}
{"task_id": "DREval/397", "code": "import re\n\n\ndef words_ae(text):\n    list = re.findall(\"[ae]\\w+\", text)\n    return list\n", "entry_point": "words_ae", "inputs": ["[(\"python programe\"),]", "[(\"python programe language\"),]", "[(\"assert statement\"),]"], "outputs": [["ame"], ["ame", "anguage"], ["assert", "atement"]], "innvocations": ["words_ae(\"python programe\")\n", "words_ae(\"python programe language\")\n", "words_ae(\"assert statement\")\n"]}
{"task_id": "DREval/399", "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n", "entry_point": "count_Primes_nums", "inputs": ["(5,)", "(10,)", "(100,)"], "outputs": [2, 4, 25], "innvocations": ["count_Primes_nums(5)\n", "count_Primes_nums(10)\n", "count_Primes_nums(100)\n"]}
{"task_id": "DREval/400", "code": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n", "entry_point": "swap_numbers", "inputs": ["(10,20)", "(15,17)", "(100,200)"], "outputs": [[20, 10], [17, 15], [200, 100]], "innvocations": ["swap_numbers(10, 20)\n", "swap_numbers(15, 17)\n", "swap_numbers(100, 200)\n"]}
{"task_id": "DREval/401", "code": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: (x % 2 != 0), array_nums)))\n    return count_odd\n", "entry_point": "count_odd", "inputs": ["[([1, 2, 3, 5, 7, 8, 10]),]", "[([10,15,14,13,-18,12,-20]),]", "[([1, 2, 4, 8, 9]),]"], "outputs": [4, 2, 2], "innvocations": ["count_odd([1, 2, 3, 5, 7, 8, 10])\n", "count_odd([10, 15, 14, 13, -18, 12, -20])\n", "count_odd([1, 2, 4, 8, 9])\n"]}
{"task_id": "DREval/402", "code": "def maximize_elements(test_tup1, test_tup2):\n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "maximize_elements", "inputs": ["(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))", "(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))"], "outputs": [[[6, 7], [4, 9], [2, 9], [7, 10]], [[7, 8], [5, 10], [3, 10], [8, 11]], [[8, 9], [6, 11], [4, 11], [9, 12]]], "innvocations": ["maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n", "maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n", "maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n"]}
{"task_id": "DREval/404", "code": "def division_elements(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "division_elements", "inputs": ["((10, 4, 6, 9),(5, 2, 3, 3))", "((12, 6, 8, 16),(6, 3, 4, 4))", "((20, 14, 36, 18),(5, 7, 6, 9))"], "outputs": [[2, 2, 2, 3], [2, 2, 2, 4], [4, 2, 6, 2]], "innvocations": ["division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n", "division_elements((12, 6, 8, 16), (6, 3, 4, 4))\n", "division_elements((20, 14, 36, 18), (5, 7, 6, 9))\n"]}
{"task_id": "DREval/406", "code": "def merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "entry_point": "merge_dict", "inputs": ["({'a': 100, 'b': 200},{'x': 300, 'y': 200})", "({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})", "({'a':10,'b':20},{'x':30,'y':40})"], "outputs": [{"a": 100, "b": 200, "x": 300, "y": 200}, {"a": 900, "b": 900, "d": 900}, {"a": 10, "b": 20, "x": 30, "y": 40}], "innvocations": ["merge_dict({\"a\": 100, \"b\": 200}, {\"x\": 300, \"y\": 200})\n", "merge_dict({\"a\": 900, \"b\": 900, \"d\": 900}, {\"a\": 900, \"b\": 900, \"d\": 900})\n", "merge_dict({\"a\": 10, \"b\": 20}, {\"x\": 30, \"y\": 40})\n"]}
{"task_id": "DREval/407", "code": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n", "entry_point": "dog_age", "inputs": ["(12,)", "(15,)", "(24,)"], "outputs": [61, 73, 109], "innvocations": ["dog_age(12)\n", "dog_age(15)\n", "dog_age(24)\n"]}
{"task_id": "DREval/409", "code": "def lateralsurface_cube(l):\n    LSA = 4 * (l * l)\n    return LSA\n", "entry_point": "lateralsurface_cube", "inputs": ["(5,)", "(9,)", "(10,)"], "outputs": [100, 324, 400], "innvocations": ["lateralsurface_cube(5)\n", "lateralsurface_cube(9)\n", "lateralsurface_cube(10)\n"]}
{"task_id": "DREval/413", "code": "def sum_even_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n", "entry_point": "sum_even_and_even_index", "inputs": ["([5, 6, 12, 1, 18, 8],6)", "([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10)", "([5, 6, 12, 1],4)"], "outputs": [30, 26, 12], "innvocations": ["sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)\n", "sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n", "sum_even_and_even_index([5, 6, 12, 1], 4)\n"]}
{"task_id": "DREval/414", "code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j * j)\n    return sum\n", "entry_point": "even_Power_Sum", "inputs": ["(2,)", "(3,)", "(1,)"], "outputs": [1056, 8832, 32], "innvocations": ["even_Power_Sum(2)\n", "even_Power_Sum(3)\n", "even_Power_Sum(1)\n"]}
{"task_id": "DREval/415", "code": "def rear_extract(test_list):\n    res = [lis[-1] for lis in test_list]\n    return res\n", "entry_point": "rear_extract", "inputs": ["[([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]),]", "[([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]),]", "[([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]),]"], "outputs": [[21, 20, 19], [36, 25, 45], [14, 36, 56]], "innvocations": ["rear_extract([(1, \"Rash\", 21), (2, \"Varsha\", 20), (3, \"Kil\", 19)])\n", "rear_extract([(1, \"Sai\", 36), (2, \"Ayesha\", 25), (3, \"Salman\", 45)])\n", "rear_extract([(1, \"Sudeep\", 14), (2, \"Vandana\", 36), (3, \"Dawood\", 56)])\n"]}
{"task_id": "DREval/416", "code": "def substract_elements(test_tup1, test_tup2):\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return res\n", "entry_point": "substract_elements", "inputs": ["((10, 4, 5), (2, 5, 18))", "((11, 2, 3), (24, 45 ,16))", "((7, 18, 9), (10, 11, 12))"], "outputs": [[8, -1, -13], [-13, -43, -13], [-3, 7, -3]], "innvocations": ["substract_elements((10, 4, 5), (2, 5, 18))\n", "substract_elements((11, 2, 3), (24, 45, 16))\n", "substract_elements((7, 18, 9), (10, 11, 12))\n"]}
{"task_id": "DREval/418", "code": "import math as mt\n\n\ndef get_Position(a, n, m):\n    for i in range(n):\n        a[i] = a[i] // m + (a[i] % m != 0)\n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n    return result + 1\n", "entry_point": "get_Position", "inputs": ["([2,5,4],3,2)", "([4,3],2,2)", "([1,2,3,4],4,1)"], "outputs": [2, 2, 4], "innvocations": ["get_Position([2, 5, 4], 3, 2)\n", "get_Position([4, 3], 2, 2)\n", "get_Position([1, 2, 3, 4], 4, 1)\n"]}
{"task_id": "DREval/419", "code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r * r * h\n    return volume\n", "entry_point": "volume_cylinder", "inputs": ["(10,5)", "(4,5)", "(4,10)"], "outputs": [1570.7500000000002, 251.32000000000002, 502.64000000000004], "innvocations": ["volume_cylinder(10, 5)\n", "volume_cylinder(4, 5)\n", "volume_cylinder(4, 10)\n"]}
{"task_id": "DREval/420", "code": "def dict_filter(dict, n):\n    result = {key: value for (key, value) in dict.items() if value >= n}\n    return result\n", "entry_point": "dict_filter", "inputs": ["({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)", "({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)", "({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)"], "outputs": [{"Cierra Vega": 175, "Alden Cantrell": 180, "Pierre Cox": 190}, {"Alden Cantrell": 180, "Pierre Cox": 190}, {"Pierre Cox": 190}], "innvocations": ["dict_filter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 170)\n", "dict_filter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 180)\n", "dict_filter({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 190)\n"]}
{"task_id": "DREval/421", "code": "def count_first_elements(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return count\n", "entry_point": "count_first_elements", "inputs": ["[((1, 5, 7, (4, 6), 10) ),]", "[((2, 9, (5, 7), 11) ),]", "[((11, 15, 5, 8, (2, 3), 8) ),]"], "outputs": [3, 2, 4], "innvocations": ["count_first_elements((1, 5, 7, (4, 6), 10))\n", "count_first_elements((2, 9, (5, 7), 11))\n", "count_first_elements((11, 15, 5, 8, (2, 3), 8))\n"]}
{"task_id": "DREval/423", "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n", "entry_point": "sequential_search", "inputs": ["([11,23,58,31,56,77,43,12,65,19],31)", "([12, 32, 45, 62, 35, 47, 44, 61],61)", "([9, 10, 17, 19, 22, 39, 48, 56],48)"], "outputs": [[true, 3], [true, 7], [true, 6]], "innvocations": ["sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n", "sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)\n", "sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)\n"]}
{"task_id": "DREval/426", "code": "def validate(n):\n    for i in range(10):\n        temp = n\n        count = 0\n        while temp:\n            if temp % 10 == i:\n                count += 1\n            if count > i:\n                return False\n            temp //= 10\n    return True\n", "entry_point": "validate", "inputs": ["(1234,)", "(51241,)", "(321,)"], "outputs": [true, false, true], "innvocations": ["validate(1234)\n", "validate(51241)\n", "validate(321)\n"]}
{"task_id": "DREval/427", "code": "def check_element(list, element):\n    check_element = all(v == element for v in list)\n    return check_element\n", "entry_point": "check_element", "inputs": ["([\"green\", \"orange\", \"black\", \"white\"],'blue')", "([1,2,3,4],7)", "([\"green\", \"green\", \"green\", \"green\"],'green')"], "outputs": [false, false, true], "innvocations": ["check_element([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n", "check_element([1, 2, 3, 4], 7)\n", "check_element([\"green\", \"green\", \"green\", \"green\"], \"green\")\n"]}
{"task_id": "DREval/429", "code": "def max_sub_array_sum_repeated(a, n, k):\n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n", "entry_point": "max_sub_array_sum_repeated", "inputs": ["([10, 20, -30, -1], 4, 3)", "([-1, 10, 20], 3, 2)", "([-1, -2, -3], 3, 3)"], "outputs": [30, 59, -1], "innvocations": ["max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n", "max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n", "max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n"]}
{"task_id": "DREval/431", "code": "def modular_inverse(arr, N, P):\n    current_element = 0\n    for i in range(0, N):\n        if (arr[i] * arr[i]) % P == 1:\n            current_element = current_element + 1\n    return current_element\n", "entry_point": "modular_inverse", "inputs": ["([ 1, 6, 4, 5 ], 4, 7)", "([1, 3, 8, 12, 12], 5, 13)", "([2, 3, 4, 5], 4, 6)"], "outputs": [2, 3, 1], "innvocations": ["modular_inverse([1, 6, 4, 5], 4, 7)\n", "modular_inverse([1, 3, 8, 12, 12], 5, 13)\n", "modular_inverse([2, 3, 4, 5], 4, 6)\n"]}
{"task_id": "DREval/432", "code": "def odd_Days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if hund1:\n        ordd += hund1\n        leap -= hund1\n    if hund4:\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n", "entry_point": "odd_Days", "inputs": ["(100,)", "(50,)", "(75,)"], "outputs": [5, 6, 2], "innvocations": ["odd_Days(100)\n", "odd_Days(50)\n", "odd_Days(75)\n"]}
{"task_id": "DREval/433", "code": "def max_length(list1):\n    max_length = max(len(x) for x in list1)\n    max_list = max((x) for x in list1)\n    return (max_length, max_list)\n", "entry_point": "max_length", "inputs": ["[([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),]", "[([[1], [5, 7], [10, 12, 14,15]]),]", "[([[5], [15,20,25]]),]"], "outputs": [[3, [13, 15, 17]], [4, [10, 12, 14, 15]], [3, [15, 20, 25]]], "innvocations": ["max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n", "max_length([[1], [5, 7], [10, 12, 14, 15]])\n", "max_length([[5], [15, 20, 25]])\n"]}
{"task_id": "DREval/434", "code": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    return dp[n]\n", "entry_point": "count_no_of_ways", "inputs": ["(2, 4)", "(3, 2)", "(4, 4)"], "outputs": [16, 6, 228], "innvocations": ["count_no_of_ways(2, 4)\n", "count_no_of_ways(3, 2)\n", "count_no_of_ways(4, 4)\n"]}
{"task_id": "DREval/435", "code": "def find(n, m):\n    q = n // m\n    return q\n", "entry_point": "find", "inputs": ["(10,3)", "(4,2)", "(20,5)"], "outputs": [3, 2, 4], "innvocations": ["find(10, 3)\n", "find(4, 2)\n", "find(20, 5)\n"]}
{"task_id": "DREval/436", "code": "import math\n\n\ndef otherside_rightangle(w, h):\n    s = math.sqrt((w * w) + (h * h))\n    return s\n", "entry_point": "otherside_rightangle", "inputs": ["(7,8)", "(3,4)", "(7,15)"], "outputs": [10.63014581273465, 5.0, 16.55294535724685], "innvocations": ["otherside_rightangle(7, 8)\n", "otherside_rightangle(3, 4)\n", "otherside_rightangle(7, 15)\n"]}
{"task_id": "DREval/437", "code": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    return max_val\n", "entry_point": "max_val", "inputs": ["[(['Python', 3, 2, 4, 5, 'version']),]", "[(['Python', 15, 20, 25]),]", "[(['Python', 30, 20, 40, 50, 'version']),]"], "outputs": [5, 25, 50], "innvocations": ["max_val([\"Python\", 3, 2, 4, 5, \"version\"])\n", "max_val([\"Python\", 15, 20, 25])\n", "max_val([\"Python\", 30, 20, 40, 50, \"version\"])\n"]}
{"task_id": "DREval/439", "code": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n", "entry_point": "get_Inv_Count", "inputs": ["([1,20,6,4,5],5)", "([1,2,1],3)", "([1,2,5,6,1],5)"], "outputs": [5, 1, 3], "innvocations": ["get_Inv_Count([1, 20, 6, 4, 5], 5)\n", "get_Inv_Count([1, 2, 1], 3)\n", "get_Inv_Count([1, 2, 5, 6, 1], 5)\n"]}
{"task_id": "DREval/440", "code": "def flatten_list(list1):\n    result_list = []\n    if not list1:\n        return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num:\n            stack.append(c_num)\n        if isinstance(next, list):\n            if next:\n                stack.append(list(next))\n        else:\n            result_list.append(next)\n    result_list.reverse()\n    return result_list\n", "entry_point": "flatten_list", "inputs": ["[([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),]", "[([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),]", "[([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]),]"], "outputs": [[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], [10, 20, 40, 30, 56, 25, 10, 20, 33, 40], [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]], "innvocations": ["flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n", "flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n", "flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n"]}
{"task_id": "DREval/441", "code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result\n", "entry_point": "intersection_nested_lists", "inputs": ["( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])", "(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])"], "outputs": [[[12], [7, 11], [1, 5, 8]], [[], []], [["john"], ["john"], ["john"], []]], "innvocations": ["intersection_nested_lists(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n)\n", "intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n", "intersection_nested_lists(\n    [\"john\", \"amal\", \"joel\", \"george\"], [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]]\n)\n"]}
{"task_id": "DREval/442", "code": "from collections import defaultdict\n\n\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "entry_point": "max_aggregate", "inputs": ["[([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]),]", "[([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)]),]", "[([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)]),]"], "outputs": [["Juan Whelan", 212], ["Juan Whelan", 72], ["Sabah Colley", 70]], "innvocations": ["max_aggregate(\n    [(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]\n)\n", "max_aggregate(\n    [(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]\n)\n", "max_aggregate(\n    [(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]\n)\n"]}
{"task_id": "DREval/443", "code": "def count_binary_seq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) / r\n        res += nCr * nCr\n    return res\n", "entry_point": "count_binary_seq", "inputs": ["(1,)", "(2,)", "(3,)"], "outputs": [2.0, 6.0, 20.0], "innvocations": ["count_binary_seq(1)\n", "count_binary_seq(2)\n", "count_binary_seq(3)\n"]}
{"task_id": "DREval/445", "code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = int(n / 2)\n    while n > 0:\n        n = int(n / 2)\n        msb += 1\n    return 1 << msb\n", "entry_point": "set_Bit_Number", "inputs": ["(6,)", "(10,)", "(18,)"], "outputs": [4, 8, 16], "innvocations": ["set_Bit_Number(6)\n", "set_Bit_Number(10)\n", "set_Bit_Number(18)\n"]}
{"task_id": "DREval/446", "code": "import sys\n\n\ndef solve(a, n):\n    mx = -sys.maxsize - 1\n    for j in range(1, n):\n        if mx > a[j]:\n            return False\n        mx = max(mx, a[j - 1])\n    return True\n", "entry_point": "solve", "inputs": ["([1,0,2],3)", "([1,2,0],3)", "([1,2,1],3)"], "outputs": [true, false, true], "innvocations": ["solve([1, 0, 2], 3)\n", "solve([1, 2, 0], 3)\n", "solve([1, 2, 1], 3)\n"]}
{"task_id": "DREval/447", "code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index and right >= index:\n            if index == left:\n                index = right\n            else:\n                index = index - 1\n    return arr[index]\n", "entry_point": "find_Element", "inputs": ["([1,2,3,4,5],[[0,2],[0,3]],2,1)", "([1,2,3,4],[[0,1],[0,2]],1,2)", "([1,2,3,4,5,6],[[0,1],[0,2]],1,1)"], "outputs": [3, 3, 1], "innvocations": ["find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n", "find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n", "find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n"]}
{"task_id": "DREval/448", "code": "import re\n\n\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "entry_point": "start_withp", "inputs": ["[([\"Python PHP\", \"Java JavaScript\", \"c c++\"]),]", "[([\"Python Programming\",\"Java Programming\"]),]", "[([\"Pqrst Pqr\",\"qrstuv\"]),]"], "outputs": [["Python", "PHP"], ["Python", "Programming"], ["Pqrst", "Pqr"]], "innvocations": ["start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n", "start_withp([\"Python Programming\", \"Java Programming\"])\n", "start_withp([\"Pqrst Pqr\", \"qrstuv\"])\n"]}
{"task_id": "DREval/449", "code": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        if a[i] > a[0]:\n            dp[0][i] = a[i] + a[0]\n        else:\n            dp[0][i] = a[i]\n    for i in range(1, n):\n        for j in range(n):\n            if a[j] > a[i] and j > i:\n                if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][i] + a[j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[index][k]\n", "entry_point": "max_sum_increasing_subseq", "inputs": ["([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)", "([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)", "([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)"], "outputs": [11, 7, 71], "innvocations": ["max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n", "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n", "max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n"]}
{"task_id": "DREval/450", "code": "from copy import deepcopy\n\n\ndef colon_tuplex(tuplex, m, n):\n    tuplex_colon = deepcopy(tuplex)\n    tuplex_colon[m].append(n)\n    return tuplex_colon\n", "entry_point": "colon_tuplex", "inputs": ["((\"HELLO\", 5, [], True) ,2,50)", "((\"HELLO\", 5, [], True) ,2,100)", "((\"HELLO\", 5, [], True) ,2,500)"], "outputs": [["HELLO", 5, [50], true], ["HELLO", 5, [100], true], ["HELLO", 5, [500], true]], "innvocations": ["colon_tuplex((\"HELLO\", 5, [], True), 2, 50)\n", "colon_tuplex((\"HELLO\", 5, [], True), 2, 100)\n", "colon_tuplex((\"HELLO\", 5, [], True), 2, 500)\n"]}
{"task_id": "DREval/451", "code": "def large_product(nums1, nums2, N):\n    result = sorted([x * y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "entry_point": "large_product", "inputs": ["([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)", "([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)", "([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)"], "outputs": [[60, 54, 50], [60, 54, 50, 48], [60, 54, 50, 48, 45]], "innvocations": ["large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n", "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n", "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n"]}
{"task_id": "DREval/452", "code": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\n", "entry_point": "maximum", "inputs": ["(5,10)", "(-1,-2)", "(9,7)"], "outputs": [10, -1, 9], "innvocations": ["maximum(5, 10)\n", "maximum(-1, -2)\n", "maximum(9, 7)\n"]}
{"task_id": "DREval/453", "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace())\n    return result\n", "entry_point": "string_to_tuple", "inputs": ["[(\"python 3.0\"),]", "[(\"item1\"),]", "[(\"15.10\"),]"], "outputs": [["p", "y", "t", "h", "o", "n", "3", ".", "0"], ["i", "t", "e", "m", "1"], ["1", "5", ".", "1", "0"]], "innvocations": ["string_to_tuple(\"python 3.0\")\n", "string_to_tuple(\"item1\")\n", "string_to_tuple(\"15.10\")\n"]}
{"task_id": "DREval/454", "code": "def set_left_most_unset_bit(n):\n    if not (n & (n + 1)):\n        return n\n    pos, temp, count = 0, n, 0\n    while temp:\n        if not (temp & 1):\n            pos = count\n        count += 1\n        temp >>= 1\n    return n | (1 << (pos))\n", "entry_point": "set_left_most_unset_bit", "inputs": ["(10,)", "(12,)", "(15,)"], "outputs": [14, 14, 15], "innvocations": ["set_left_most_unset_bit(10)\n", "set_left_most_unset_bit(12)\n", "set_left_most_unset_bit(15)\n"]}
{"task_id": "DREval/455", "code": "import math\n\n\ndef volume_cone(r, h):\n    volume = (1.0 / 3) * math.pi * r * r * h\n    return volume\n", "entry_point": "volume_cone", "inputs": ["(5,12)", "(10,15)", "(19,17)"], "outputs": [314.15926535897927, 1570.7963267948965, 6426.651371693521], "innvocations": ["volume_cone(5, 12)\n", "volume_cone(10, 15)\n", "volume_cone(19, 17)\n"]}
{"task_id": "DREval/456", "code": "def pos_nos(list1):\n    for num in list1:\n        if num >= 0:\n            return num\n", "entry_point": "pos_nos", "inputs": ["[([-1,-2,1,2]),]", "[([3,4,-5]),]", "[([-2,-3,1]),]"], "outputs": [1, 3, 1], "innvocations": ["pos_nos([-1, -2, 1, 2])\n", "pos_nos([3, 4, -5])\n", "pos_nos([-2, -3, 1])\n"]}
{"task_id": "DREval/457", "code": "def max_sum_rectangular_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)\n", "entry_point": "max_sum_rectangular_grid", "inputs": ["([ [1, 4, 5], [2, 0, 0 ] ], 3)", "([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)", "([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5)"], "outputs": [7, 24, 81], "innvocations": ["max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)\n", "max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n", "max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n"]}
{"task_id": "DREval/458", "code": "def find_Max_Len_Even(str):\n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while i < n:\n        if str[i] == \" \":\n            if currlen % 2 == 0:\n                if maxlen < currlen:\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else:\n            currlen += 1\n        i += 1\n    if currlen % 2 == 0:\n        if maxlen < currlen:\n            maxlen = currlen\n            st = i - currlen\n    if st == -1:\n        return \"-1\"\n    return str[st : st + maxlen]\n", "entry_point": "find_Max_Len_Even", "inputs": ["[(\"python language\"),]", "[(\"maximum even length\"),]", "[(\"eve\"),]"], "outputs": ["language", "length", "-1"], "innvocations": ["find_Max_Len_Even(\"python language\")\n", "find_Max_Len_Even(\"maximum even length\")\n", "find_Max_Len_Even(\"eve\")\n"]}
{"task_id": "DREval/459", "code": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "entry_point": "find_last_occurrence", "inputs": ["([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)", "([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)"], "outputs": [3, 9, 6], "innvocations": ["find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n", "find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n", "find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n"]}
{"task_id": "DREval/461", "code": "def max_volume(s):\n    maxvalue = 0\n    i = 1\n    for i in range(s - 1):\n        j = 1\n        for j in range(s):\n            k = s - i - j\n            maxvalue = max(maxvalue, i * j * k)\n    return maxvalue\n", "entry_point": "max_volume", "inputs": ["(8,)", "(4,)", "(1,)"], "outputs": [18, 2, 0], "innvocations": ["max_volume(8)\n", "max_volume(4)\n", "max_volume(1)\n"]}
{"task_id": "DREval/463", "code": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n + 1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum**2\n    return squareofsum - sumofsquares\n", "entry_point": "sum_difference", "inputs": ["(12,)", "(20,)", "(54,)"], "outputs": [5434, 41230, 2151270], "innvocations": ["sum_difference(12)\n", "sum_difference(20)\n", "sum_difference(54)\n"]}
{"task_id": "DREval/464", "code": "def find_demlo(s):\n    l = len(s)\n    res = \"\"\n    for i in range(1, l + 1):\n        res = res + str(i)\n    for i in range(l - 1, 0, -1):\n        res = res + str(i)\n    return res\n", "entry_point": "find_demlo", "inputs": ["[(\"111111\"),]", "[(\"1111\"),]", "[(\"13333122222\"),]"], "outputs": ["12345654321", "1234321", "123456789101110987654321"], "innvocations": ["find_demlo(\"111111\")\n", "find_demlo(\"1111\")\n", "find_demlo(\"13333122222\")\n"]}
{"task_id": "DREval/465", "code": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result\n", "entry_point": "position_min", "inputs": ["[([12,33,23,10,67,89,45,667,23,12,11,10,54]),]", "[([1,2,2,2,4,4,4,5,5,5,5]),]", "[([2,1,5,6,8,3,4,9,10,11,8,12]),]"], "outputs": [[3, 11], [0], [1]], "innvocations": ["position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n", "position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n", "position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n"]}
{"task_id": "DREval/466", "code": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n\ndef re_arrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 0) or (arr[index] < 0 and index % 2 == 1):\n                out_of_place = index\n    return arr\n", "entry_point": "re_arrange", "inputs": ["([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10)", "([1, 2, 3, -4, -1, 4], 6)", "([4, 7, 9, 77, -4, 5, -3, -9], 8)"], "outputs": [[-5, 5, -2, 2, -8, 4, 7, 1, 8, 0], [-4, 1, -1, 2, 3, 4], [-4, 4, -3, 7, -9, 9, 77, 5]], "innvocations": ["re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n", "re_arrange([1, 2, 3, -4, -1, 4], 6)\n", "re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n"]}
{"task_id": "DREval/467", "code": "def sum_of_alternates(test_tuple):\n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if idx % 2:\n            sum1 += ele\n        else:\n            sum2 += ele\n    return ((sum1), (sum2))\n", "entry_point": "sum_of_alternates", "inputs": ["[((5, 6, 3, 6, 10, 34)),]", "[((1, 2, 3, 4, 5)),]", "[((6, 7, 8, 9, 4, 5)),]"], "outputs": [[46, 18], [6, 9], [21, 18]], "innvocations": ["sum_of_alternates((5, 6, 3, 6, 10, 34))\n", "sum_of_alternates((1, 2, 3, 4, 5))\n", "sum_of_alternates((6, 7, 8, 9, 4, 5))\n"]}
{"task_id": "DREval/468", "code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    return res\n", "entry_point": "get_Min_Squares", "inputs": ["(6,)", "(2,)", "(4,)"], "outputs": [3, 2, 1], "innvocations": ["get_Min_Squares(6)\n", "get_Min_Squares(2)\n", "get_Min_Squares(4)\n"]}
{"task_id": "DREval/469", "code": "from collections import defaultdict\n\n\ndef most_occurrences(test_list):\n    temp = defaultdict(int)\n    for sub in test_list:\n        for wrd in sub.split():\n            temp[wrd] += 1\n    res = max(temp, key=temp.get)\n    return str(res)\n", "entry_point": "most_occurrences", "inputs": ["[([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ),]", "[([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ),]", "[([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ),]"], "outputs": ["UTS", "year", "can"], "innvocations": ["most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n", "most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n", "most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n"]}
{"task_id": "DREval/471", "code": "def rotate_left(list1, m, n):\n    result = list1[m:] + list1[:n]\n    return result\n", "entry_point": "rotate_left", "inputs": ["([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)", "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)", "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)"], "outputs": [[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4], [3, 4, 5, 6, 7, 8, 9, 10, 1, 2], [6, 7, 8, 9, 10, 1, 2]], "innvocations": ["rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n", "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n", "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n"]}
{"task_id": "DREval/472", "code": "def neg_count(list):\n    neg_count = 0\n    for num in list:\n        if num <= 0:\n            neg_count += 1\n    return neg_count\n", "entry_point": "neg_count", "inputs": ["[([-1,-2,3,-4,-5]),]", "[([1,2,3]),]", "[([1,2,-3,-10,20]),]"], "outputs": [4, 0, 2], "innvocations": ["neg_count([-1, -2, 3, -4, -5])\n", "neg_count([1, 2, 3])\n", "neg_count([1, 2, -3, -10, 20])\n"]}
{"task_id": "DREval/474", "code": "def count_unset_bits(n):\n    count = 0\n    x = 1\n    while x < n + 1:\n        if (x & n) == 0:\n            count += 1\n        x = x << 1\n    return count\n", "entry_point": "count_unset_bits", "inputs": ["(2,)", "(4,)", "(6,)"], "outputs": [1, 2, 1], "innvocations": ["count_unset_bits(2)\n", "count_unset_bits(4)\n", "count_unset_bits(6)\n"]}
{"task_id": "DREval/476", "code": "def Sort(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n", "entry_point": "Sort", "inputs": ["[([['a', 10], ['b', 5], ['c', 20], ['d', 15]]),]", "[([['452', 10], ['256', 5], ['100', 20], ['135', 15]]),]", "[([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]),]"], "outputs": [[["b", 5], ["a", 10], ["d", 15], ["c", 20]], [["256", 5], ["452", 10], ["135", 15], ["100", 20]], [["akhil", 5], ["rishi", 10], ["gaur", 15], ["ramya", 20]]], "innvocations": ["Sort([[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]])\n", "Sort([[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]])\n", "Sort([[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]])\n"]}
{"task_id": "DREval/478", "code": "def ap_sum(a, n, d):\n    total = (n * (2 * a + (n - 1) * d)) / 2\n    return total\n", "entry_point": "ap_sum", "inputs": ["(1,5,2)", "(2,6,4)", "(1,4,5)"], "outputs": [25.0, 72.0, 34.0], "innvocations": ["ap_sum(1, 5, 2)\n", "ap_sum(2, 6, 4)\n", "ap_sum(1, 4, 5)\n"]}
{"task_id": "DREval/481", "code": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i : i + j]):\n                result += 1\n    return result\n", "entry_point": "count_Substring_With_Equal_Ends", "inputs": ["[('aba'),]", "[('abcab'),]", "[('abc'),]"], "outputs": [4, 7, 3], "innvocations": ["count_Substring_With_Equal_Ends(\"aba\")\n", "count_Substring_With_Equal_Ends(\"abcab\")\n", "count_Substring_With_Equal_Ends(\"abc\")\n"]}
{"task_id": "DREval/482", "code": "def find_Divisor(x, y):\n    if x == y:\n        return y\n    return 2\n", "entry_point": "find_Divisor", "inputs": ["(2,2)", "(2,5)", "(5,10)"], "outputs": [2, 2, 2], "innvocations": ["find_Divisor(2, 2)\n", "find_Divisor(2, 5)\n", "find_Divisor(5, 10)\n"]}
{"task_id": "DREval/484", "code": "def set_to_tuple(s):\n    t = tuple(sorted(s))\n    return t\n", "entry_point": "set_to_tuple", "inputs": ["[({1, 2, 3, 4, 5}),]", "[({6, 7, 8, 9, 10, 11}),]", "[({12, 13, 14, 15, 16}),]"], "outputs": [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16]], "innvocations": ["set_to_tuple({1, 2, 3, 4, 5})\n", "set_to_tuple({6, 7, 8, 9, 10, 11})\n", "set_to_tuple({12, 13, 14, 15, 16})\n"]}
{"task_id": "DREval/485", "code": "from heapq import heappop, heappush\n\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n\ndef find_minimum_range(list):\n    high = float(\"-inf\")\n    p = (0, float(\"inf\"))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])\n", "entry_point": "find_minimum_range", "inputs": ["[([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]),]", "[([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]),]", "[([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]),]"], "outputs": [[4, 6], [4, 7], [5, 7]], "innvocations": ["find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n", "find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n", "find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n"]}
{"task_id": "DREval/486", "code": "def dig_let(s):\n    d = l = 0\n    for c in s:\n        if c.isdigit():\n            d = d + 1\n        elif c.isalpha():\n            l = l + 1\n        else:\n            pass\n    return (l, d)\n", "entry_point": "dig_let", "inputs": ["[(\"python\"),]", "[(\"program\"),]", "[(\"python3.0\"),]"], "outputs": [[6, 0], [7, 0], [6, 2]], "innvocations": ["dig_let(\"python\")\n", "dig_let(\"program\")\n", "dig_let(\"python3.0\")\n"]}
{"task_id": "DREval/488", "code": "def diff_consecutivenums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n", "entry_point": "diff_consecutivenums", "inputs": ["[([1, 1, 3, 4, 4, 5, 6, 7]),]", "[([4, 5, 8, 9, 6, 10]),]", "[([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]),]"], "outputs": [[0, 2, 1, 0, 1, 1, 1], [1, 3, 1, -3, 4], [1, 1, 1, 1, 0, 0, 0, 1, 2]], "innvocations": ["diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n", "diff_consecutivenums([4, 5, 8, 9, 6, 10])\n", "diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n"]}
{"task_id": "DREval/490", "code": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return n * (n + 1) * (3 * m - n + 1) // 6\n", "entry_point": "count_Squares", "inputs": ["(4,3)", "(1,2)", "(2,2)"], "outputs": [20, 2, 5], "innvocations": ["count_Squares(4, 3)\n", "count_Squares(1, 2)\n", "count_Squares(2, 2)\n"]}
{"task_id": "DREval/491", "code": "def bin_coff(n, r):\n    val = 1\n    if r > (n - r):\n        r = n - r\n    for i in range(0, r):\n        val *= n - i\n        val //= i + 1\n    return val\n\n\ndef find_ways(M):\n    n = M // 2\n    a = bin_coff(2 * n, n)\n    b = a // (n + 1)\n    return b\n", "entry_point": "find_ways", "inputs": ["(4,)", "(6,)", "(8,)"], "outputs": [2, 5, 14], "innvocations": ["find_ways(4)\n", "find_ways(6)\n", "find_ways(8)\n"]}
{"task_id": "DREval/492", "code": "def check(string):\n    p = set(string)\n    s = {\"0\", \"1\"}\n    if s == p or p == {\"0\"} or p == {\"1\"}:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "entry_point": "check", "inputs": ["[(\"01010101010\"),]", "[(\"name0\"),]", "[(\"101\"),]"], "outputs": ["Yes", "No", "Yes"], "innvocations": ["check(\"01010101010\")\n", "check(\"name0\")\n", "check(\"101\")\n"]}
{"task_id": "DREval/493", "code": "def minimum_Length(s):\n    maxOcc = 0\n    n = len(s)\n    arr = [0] * 26\n    for i in range(n):\n        arr[ord(s[i]) - ord(\"a\")] += 1\n    for i in range(26):\n        if arr[i] > maxOcc:\n            maxOcc = arr[i]\n    return n - maxOcc\n", "entry_point": "minimum_Length", "inputs": ["[(\"mnm\"),]", "[(\"abcda\"),]", "[(\"abcb\"),]"], "outputs": [1, 3, 2], "innvocations": ["minimum_Length(\"mnm\")\n", "minimum_Length(\"abcda\")\n", "minimum_Length(\"abcb\")\n"]}
{"task_id": "DREval/494", "code": "def first_Element(arr, n, k):\n    count_map = {}\n    for i in range(0, n):\n        if arr[i] in count_map.keys():\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n        i += 1\n    return -1\n", "entry_point": "first_Element", "inputs": ["([0,1,2,3,4,5],6,1)", "([1,2,1,3,4],5,2)", "([2,3,4,3,5,7,1,2,3,5],10,2)"], "outputs": [0, 1, 2], "innvocations": ["first_Element([0, 1, 2, 3, 4, 5], 6, 1)\n", "first_Element([1, 2, 1, 3, 4], 5, 2)\n", "first_Element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n"]}
{"task_id": "DREval/496", "code": "def remove_column(list1, n):\n    for i in list1:\n        del i[n]\n    return list1\n", "entry_point": "remove_column", "inputs": ["([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)", "([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)", "([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)"], "outputs": [[[2, 3], [4, 5], [1, 1]], [[1, 2], [-2, 4], [1, -1]], [[3], [7], [3], [15, 17], [7], [11]]], "innvocations": ["remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n", "remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n", "remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n"]}
{"task_id": "DREval/497", "code": "def tn_ap(a, n, d):\n    tn = a + (n - 1) * d\n    return tn\n", "entry_point": "tn_ap", "inputs": ["(1,5,2)", "(2,6,4)", "(1,4,5)"], "outputs": [9, 22, 16], "innvocations": ["tn_ap(1, 5, 2)\n", "tn_ap(2, 6, 4)\n", "tn_ap(1, 4, 5)\n"]}
{"task_id": "DREval/498", "code": "def count_Rectangles(radius):\n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            diagnalLengthSquare = a * a + b * b\n            if diagnalLengthSquare <= diameterSquare:\n                rectangles += 1\n    return rectangles\n", "entry_point": "count_Rectangles", "inputs": ["(2,)", "(1,)", "(0,)"], "outputs": [8, 1, 0], "innvocations": ["count_Rectangles(2)\n", "count_Rectangles(1)\n", "count_Rectangles(0)\n"]}
{"task_id": "DREval/499", "code": "def find_angle(a, b):\n    c = 180 - (a + b)\n    return c\n", "entry_point": "find_angle", "inputs": ["(47,89)", "(45,95)", "(50,40)"], "outputs": [44, 40, 90], "innvocations": ["find_angle(47, 89)\n", "find_angle(45, 95)\n", "find_angle(50, 40)\n"]}
{"task_id": "DREval/500", "code": "def find_max(test_list):\n    res = max(int(j) for i in test_list for j in i)\n    return res\n", "entry_point": "find_max", "inputs": ["[([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]),]", "[([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]),]", "[([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]),]"], "outputs": [10, 11, 12], "innvocations": ["find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n", "find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n", "find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n"]}
{"task_id": "DREval/504", "code": "def remove_empty(list1):\n    remove_empty = [x for x in list1 if x]\n    return remove_empty\n", "entry_point": "remove_empty", "inputs": ["[([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]),]", "[([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []]),]", "[([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []]),]"], "outputs": [["Red", "Green", [1, 2], "Blue"], ["Green", [1, 2], "Blue"], ["Python", "programming", "language"]], "innvocations": ["remove_empty([[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []])\n", "remove_empty([[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []])\n", "remove_empty([[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []])\n"]}
{"task_id": "DREval/505", "code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0]\n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n", "entry_point": "max_occurrences", "inputs": ["[([1,2,3,1,2,3,12,4,2]),]", "[([1,2,6,7,0,1,0,1,0]),]", "[([1,2,3,1,2,4,1]),]"], "outputs": [2, 1, 1], "innvocations": ["max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])\n", "max_occurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])\n", "max_occurrences([1, 2, 3, 1, 2, 4, 1])\n"]}
{"task_id": "DREval/506", "code": "def add_K_element(test_list, K):\n    res = [tuple(j + K for j in sub) for sub in test_list]\n    return res\n", "entry_point": "add_K_element", "inputs": ["([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)", "([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)", "([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)"], "outputs": [[[5, 7, 8], [6, 8, 10], [7, 12, 5]], [[9, 10, 11], [12, 13, 14], [15, 16, 17]], [[20, 21, 22], [23, 24, 25], [26, 27, 28]]], "innvocations": ["add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n", "add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n", "add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n"]}
{"task_id": "DREval/507", "code": "def make_flip(ch):\n    return \"1\" if (ch == \"0\") else \"0\"\n\n\ndef get_flip_with_starting_charcter(str, expected):\n    flip_count = 0\n    for i in range(len(str)):\n        if str[i] != expected:\n            flip_count += 1\n        expected = make_flip(expected)\n    return flip_count\n\n\ndef min_flip_to_make_string_alternate(str):\n    return min(get_flip_with_starting_charcter(str, \"0\"), get_flip_with_starting_charcter(str, \"1\"))\n", "entry_point": "min_flip_to_make_string_alternate", "inputs": ["[(\"0001010111\"),]", "[(\"001\"),]", "[(\"010111011\"),]"], "outputs": [2, 1, 2], "innvocations": ["min_flip_to_make_string_alternate(\"0001010111\")\n", "min_flip_to_make_string_alternate(\"001\")\n", "min_flip_to_make_string_alternate(\"010111011\")\n"]}
{"task_id": "DREval/508", "code": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n", "entry_point": "count_Digit", "inputs": ["(12345,)", "(11223305,)", "(4123459,)"], "outputs": [5, 8, 7], "innvocations": ["count_Digit(12345)\n", "count_Digit(11223305)\n", "count_Digit(4123459)\n"]}
{"task_id": "DREval/511", "code": "def repeat_tuples(test_tup, N):\n    res = (test_tup,) * N\n    return res\n", "entry_point": "repeat_tuples", "inputs": ["((1, 3), 4)", "((1, 2), 3)", "((3, 4), 5)"], "outputs": [[[1, 3], [1, 3], [1, 3], [1, 3]], [[1, 2], [1, 2], [1, 2]], [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]], "innvocations": ["repeat_tuples((1, 3), 4)\n", "repeat_tuples((1, 2), 3)\n", "repeat_tuples((3, 4), 5)\n"]}
{"task_id": "DREval/512", "code": "def lateralsurface_cuboid(l, w, h):\n    LSA = 2 * h * (l + w)\n    return LSA\n", "entry_point": "lateralsurface_cuboid", "inputs": ["(8,5,6)", "(7,9,10)", "(10,20,30)"], "outputs": [156, 320, 1800], "innvocations": ["lateralsurface_cuboid(8, 5, 6)\n", "lateralsurface_cuboid(7, 9, 10)\n", "lateralsurface_cuboid(10, 20, 30)\n"]}
{"task_id": "DREval/513", "code": "def float_sort(price):\n    float_sort = sorted(price, key=lambda x: float(x[1]), reverse=True)\n    return float_sort\n", "entry_point": "float_sort", "inputs": ["[([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]),]", "[([('item1', '15'), ('item2', '10'), ('item3', '20')]),]", "[([('item1', '5'), ('item2', '10'), ('item3', '14')]),]"], "outputs": [[["item3", "24.5"], ["item2", "15.10"], ["item1", "12.20"]], [["item3", "20"], ["item1", "15"], ["item2", "10"]], [["item3", "14"], ["item2", "10"], ["item1", "5"]]], "innvocations": ["float_sort([(\"item1\", \"12.20\"), (\"item2\", \"15.10\"), (\"item3\", \"24.5\")])\n", "float_sort([(\"item1\", \"15\"), (\"item2\", \"10\"), (\"item3\", \"20\")])\n", "float_sort([(\"item1\", \"5\"), (\"item2\", \"10\"), (\"item3\", \"14\")])\n"]}
{"task_id": "DREval/514", "code": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n", "entry_point": "smallest_missing", "inputs": ["([0, 1, 2, 3, 4, 5, 6], 0, 6)", "([0, 1, 2, 6, 9, 11, 15], 0, 6)", "([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)"], "outputs": [7, 3, 0], "innvocations": ["smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n", "smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n", "smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n"]}
{"task_id": "DREval/515", "code": "import heapq as hq\n\n\ndef heap_assending(nums):\n    hq.heapify(nums)\n    s_result = [hq.heappop(nums) for i in range(len(nums))]\n    return s_result\n", "entry_point": "heap_assending", "inputs": ["[([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]),]", "[([25, 35, 22, 85, 14, 65, 75, 25, 58]),]", "[([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),]"], "outputs": [[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18], [14, 22, 25, 25, 35, 58, 65, 75, 85], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], "innvocations": ["heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n", "heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n", "heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"]}
{"task_id": "DREval/516", "code": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume\n", "entry_point": "volume_cuboid", "inputs": ["(1,2,3)", "(5,7,9)", "(10,15,21)"], "outputs": [6, 315, 3150], "innvocations": ["volume_cuboid(1, 2, 3)\n", "volume_cuboid(5, 7, 9)\n", "volume_cuboid(10, 15, 21)\n"]}
{"task_id": "DREval/517", "code": "def permute_string(str):\n    if len(str) == 0:\n        return [\"\"]\n    prev_list = permute_string(str[1 : len(str)])\n    next_list = []\n    for i in range(0, len(prev_list)):\n        for j in range(0, len(str)):\n            new_str = prev_list[i][0:j] + str[0] + prev_list[i][j : len(str) - 1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list\n", "entry_point": "permute_string", "inputs": ["[('ab'),]", "[('abc'),]", "[('abcd'),]"], "outputs": [["ab", "ba"], ["abc", "bac", "bca", "acb", "cab", "cba"], ["abcd", "bacd", "bcad", "bcda", "acbd", "cabd", "cbad", "cbda", "acdb", "cadb", "cdab", "cdba", "abdc", "badc", "bdac", "bdca", "adbc", "dabc", "dbac", "dbca", "adcb", "dacb", "dcab", "dcba"]], "innvocations": ["permute_string(\"ab\")\n", "permute_string(\"abc\")\n", "permute_string(\"abcd\")\n"]}
{"task_id": "DREval/519", "code": "def remove_replica(test_tup):\n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele) else \"MSP\" for ele in test_tup)\n    return res\n", "entry_point": "remove_replica", "inputs": ["[((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)),]", "[((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)),]", "[((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)),]"], "outputs": [[1, "MSP", 4, "MSP", "MSP", 5, "MSP", 6, 7, "MSP"], [2, 3, 4, "MSP", 5, 6, "MSP", 7, 8, 9, "MSP"], [2, "MSP", 5, 4, "MSP", 7, "MSP", 6, "MSP", "MSP"]], "innvocations": ["remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n", "remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n", "remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n"]}
{"task_id": "DREval/520", "code": "def remove_Char(s, c):\n    counts = s.count(c)\n    s = list(s)\n    while counts:\n        s.remove(c)\n        counts -= 1\n    s = \"\".join(s)\n    return s\n", "entry_point": "remove_Char", "inputs": ["(\"aba\",'a')", "(\"toggle\",'g')", "(\"aabbc\",'b')"], "outputs": ["b", "tole", "aac"], "innvocations": ["remove_Char(\"aba\", \"a\")\n", "remove_Char(\"toggle\", \"g\")\n", "remove_Char(\"aabbc\", \"b\")\n"]}
{"task_id": "DREval/521", "code": "def move_first(test_list):\n    test_list = test_list[-1:] + test_list[:-1]\n    return test_list\n", "entry_point": "move_first", "inputs": ["[([1,2,3,4]),]", "[([0,1,2,3]),]", "[([9,8,7,1]),]"], "outputs": [[4, 1, 2, 3], [3, 0, 1, 2], [1, 9, 8, 7]], "innvocations": ["move_first([1, 2, 3, 4])\n", "move_first([0, 1, 2, 3])\n", "move_first([9, 8, 7, 1])\n"]}
{"task_id": "DREval/522", "code": "def surfacearea_cuboid(l, w, h):\n    SA = 2 * (l * w + l * h + w * h)\n    return SA\n", "entry_point": "surfacearea_cuboid", "inputs": ["(1,2,3)", "(5,7,9)", "(10,15,21)"], "outputs": [22, 286, 1350], "innvocations": ["surfacearea_cuboid(1, 2, 3)\n", "surfacearea_cuboid(5, 7, 9)\n", "surfacearea_cuboid(10, 15, 21)\n"]}
{"task_id": "DREval/523", "code": "def multi_list(rownum, colnum):\n    multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n    for row in range(rownum):\n        for col in range(colnum):\n            multi_list[row][col] = row * col\n    return multi_list\n", "entry_point": "multi_list", "inputs": ["(3,4)", "(5,7)", "(10,15)"], "outputs": [[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]], [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]], "innvocations": ["multi_list(3, 4)\n", "multi_list(5, 7)\n", "multi_list(10, 15)\n"]}
{"task_id": "DREval/524", "code": "from operator import itemgetter\n\n\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result\n", "entry_point": "index_on_inner_list", "inputs": ["([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)", "([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)", "([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)"], "outputs": [[["Beau Turnbull", 94, 98], ["Brady Kent", 97, 96], ["Greyson Fulton", 98, 99], ["Wyatt Knott", 91, 94]], [["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98], ["Brady Kent", 97, 96], ["Greyson Fulton", 98, 99]], [["Wyatt Knott", 91, 94], ["Brady Kent", 97, 96], ["Beau Turnbull", 94, 98], ["Greyson Fulton", 98, 99]]], "innvocations": ["index_on_inner_list(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 0\n)\n", "index_on_inner_list(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 1\n)\n", "index_on_inner_list(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 2\n)\n"]}
{"task_id": "DREval/525", "code": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1\n", "entry_point": "find_rotation_count", "inputs": ["[([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]),]", "[([8, 9, 10,2, 5, 6]),]", "[([2, 5, 6, 8, 9, 10]),]"], "outputs": [3, 3, 0], "innvocations": ["find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n", "find_rotation_count([8, 9, 10, 2, 5, 6])\n", "find_rotation_count([2, 5, 6, 8, 9, 10])\n"]}
{"task_id": "DREval/526", "code": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n", "entry_point": "even_bit_toggle_number", "inputs": ["(10,)", "(20,)", "(30,)"], "outputs": [15, 1, 11], "innvocations": ["even_bit_toggle_number(10)\n", "even_bit_toggle_number(20)\n", "even_bit_toggle_number(30)\n"]}
{"task_id": "DREval/527", "code": "def frequency_Of_Smallest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n", "entry_point": "frequency_Of_Smallest", "inputs": ["(5,[1,2,3,4,3])", "(7,[3,1,2,5,6,2,3])", "(7,[3,3,6,3,7,4,9])"], "outputs": [1, 1, 3], "innvocations": ["frequency_Of_Smallest(5, [1, 2, 3, 4, 3])\n", "frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3])\n", "frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9])\n"]}
{"task_id": "DREval/529", "code": "def swap_count(s):\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0\n    for i in range(len(chars)):\n        if chars[i] == \"[\":\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == \"]\":\n            count_right += 1\n            imbalance = count_right - count_left\n    return swap\n", "entry_point": "swap_count", "inputs": ["[(\"[]][][\"),]", "[(\"[[][]]\"),]", "[(\"[[][]]][\"),]"], "outputs": [2, 0, 1], "innvocations": ["swap_count(\"[]][][\")\n", "swap_count(\"[[][]]\")\n", "swap_count(\"[[][]]][\")\n"]}
{"task_id": "DREval/530", "code": "def even_or_odd(N):\n    l = len(N)\n    if (\n        N[l - 1] == \"0\"\n        or N[l - 1] == \"2\"\n        or N[l - 1] == \"4\"\n        or N[l - 1] == \"6\"\n        or N[l - 1] == \"8\"\n        or N[l - 1] == \"A\"\n        or N[l - 1] == \"C\"\n        or N[l - 1] == \"E\"\n    ):\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "entry_point": "even_or_odd", "inputs": ["[(\"AB3454D\"),]", "[(\"ABC\"),]", "[(\"AAD\"),]"], "outputs": ["Odd", "Even", "Odd"], "innvocations": ["even_or_odd(\"AB3454D\")\n", "even_or_odd(\"ABC\")\n", "even_or_odd(\"AAD\")\n"]}
{"task_id": "DREval/531", "code": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0:\n            res = i\n            break\n    return res\n", "entry_point": "highest_Power_of_2", "inputs": ["(10,)", "(19,)", "(32,)"], "outputs": [8, 16, 32], "innvocations": ["highest_Power_of_2(10)\n", "highest_Power_of_2(19)\n", "highest_Power_of_2(32)\n"]}
{"task_id": "DREval/533", "code": "def add_string(list, string):\n    add_string = [string.format(i) for i in list]\n    return add_string\n", "entry_point": "add_string", "inputs": ["([1,2,3,4],'temp{0}')", "(['a','b','c','d'], 'python{0}')", "([5,6,7,8],'string{0}')"], "outputs": [["temp1", "temp2", "temp3", "temp4"], ["pythona", "pythonb", "pythonc", "pythond"], ["string5", "string6", "string7", "string8"]], "innvocations": ["add_string([1, 2, 3, 4], \"temp{0}\")\n", "add_string([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n", "add_string([5, 6, 7, 8], \"string{0}\")\n"]}
{"task_id": "DREval/534", "code": "def convert_list_dictionary(l1, l2, l3):\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    return result\n", "entry_point": "convert_list_dictionary", "inputs": ["([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])", "([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])", "([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])"], "outputs": [[{"S001": {"Adina Park": 85}}, {"S002": {"Leyton Marsh": 98}}, {"S003": {"Duncan Boyle": 89}}, {"S004": {"Saim Richards": 92}}], [{"abc": {"python": 100}}, {"def": {"program": 200}}, {"ghi": {"language": 300}}, {"jkl": {"programs": 400}}], [{"A1": {"java": 10}}, {"A2": {"C": 20}}, {"A3": {"C++": 30}}, {"A4": {"DBMS": 40}}]], "innvocations": ["convert_list_dictionary(\n    [\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]\n)\n", "convert_list_dictionary(\n    [\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]\n)\n", "convert_list_dictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n"]}
{"task_id": "DREval/535", "code": "def get_max_sum(n):\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    while i < n + 1:\n        res.append(max(i, (res[int(i / 2)] + res[int(i / 3)] + res[int(i / 4)] + res[int(i / 5)])))\n        i = i + 1\n    return res[n]\n", "entry_point": "get_max_sum", "inputs": ["(60,)", "(10,)", "(2,)"], "outputs": [106, 12, 2], "innvocations": ["get_max_sum(60)\n", "get_max_sum(10)\n", "get_max_sum(2)\n"]}
{"task_id": "DREval/536", "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: len(i))\n    return (max_length, max_list)\n", "entry_point": "max_length_list", "inputs": ["[([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),]", "[([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]),]", "[([[3,4,5],[6,7,8,9],[10,11,12]]),]"], "outputs": [[3, [13, 15, 17]], [5, [1, 2, 3, 4, 5]], [4, [6, 7, 8, 9]]], "innvocations": ["max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n", "max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n", "max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n"]}
{"task_id": "DREval/537", "code": "def check_distinct(test_tup):\n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res\n", "entry_point": "check_distinct", "inputs": ["[((1, 4, 5, 6, 1, 4)),]", "[((1, 4, 5, 6)),]", "[((2, 3, 4, 5, 6)),]"], "outputs": [false, true, true], "innvocations": ["check_distinct((1, 4, 5, 6, 1, 4))\n", "check_distinct((1, 4, 5, 6))\n", "check_distinct((2, 3, 4, 5, 6))\n"]}
{"task_id": "DREval/538", "code": "def first_non_repeating_character(str1):\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1\n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None\n", "entry_point": "first_non_repeating_character", "inputs": ["[(\"abcabc\"),]", "[(\"abc\"),]", "[(\"ababc\"),]"], "outputs": [null, "a", "c"], "innvocations": ["first_non_repeating_character(\"abcabc\")\n", "first_non_repeating_character(\"abc\")\n", "first_non_repeating_character(\"ababc\")\n"]}
{"task_id": "DREval/540", "code": "def median_numbers(a, b, c):\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    return median\n", "entry_point": "median_numbers", "inputs": ["(25,55,65)", "(20,10,30)", "(15,45,75)"], "outputs": [55, 20, 45], "innvocations": ["median_numbers(25, 55, 65)\n", "median_numbers(20, 10, 30)\n", "median_numbers(15, 45, 75)\n"]}
{"task_id": "DREval/542", "code": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "bitwise_xor", "inputs": ["((10, 4, 6, 9), (5, 2, 3, 3))", "((11, 5, 7, 10), (6, 3, 4, 4))", "((12, 6, 8, 11), (7, 4, 5, 6))"], "outputs": [[15, 6, 5, 10], [13, 6, 3, 14], [11, 2, 13, 13]], "innvocations": ["bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n", "bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n", "bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n"]}
{"task_id": "DREval/543", "code": "def extract_freq(test_list):\n    res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n    return res\n", "entry_point": "extract_freq", "inputs": ["[([(3, 4), (1, 2), (4, 3), (5, 6)] ),]", "[([(4, 15), (2, 3), (5, 4), (6, 7)] ),]", "[([(5, 16), (2, 3), (6, 5), (6, 9)] ),]"], "outputs": [3, 4, 4], "innvocations": ["extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n", "extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])\n", "extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])\n"]}
{"task_id": "DREval/544", "code": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "add_nested_tuples", "inputs": ["(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))", "(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))"], "outputs": [[[7, 10], [7, 14], [3, 10], [8, 13]], [[9, 12], [9, 16], [5, 12], [10, 15]], [[11, 14], [11, 18], [7, 14], [12, 17]]], "innvocations": ["add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n", "add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n", "add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n"]}
{"task_id": "DREval/545", "code": "def ncr_modp(n, r, p):\n    C = [0 for i in range(r + 1)]\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n", "entry_point": "ncr_modp", "inputs": ["(10,2,13)", "(15,12,43)", "(17,9,18)"], "outputs": [6, 25, 10], "innvocations": ["ncr_modp(10, 2, 13)\n", "ncr_modp(15, 12, 43)\n", "ncr_modp(17, 9, 18)\n"]}
{"task_id": "DREval/546", "code": "import re\n\n\ndef is_valid_URL(str):\n    regex = (\n        \"((http|https)://)(www.)?\"\n        + \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\"\n        + \"{2,256}\\\\.[a-z]\"\n        + \"{2,6}\\\\b([-a-zA-Z0-9@:%\"\n        + \"._\\\\+~#?&//=]*)\"\n    )\n    p = re.compile(regex)\n    if str == None:\n        return False\n    if re.search(p, str):\n        return True\n    else:\n        return False\n", "entry_point": "is_valid_URL", "inputs": ["[(\"https://www.google.com\"),]", "[(\"https:/www.gmail.com\"),]", "[(\"https:// www.redit.com\"),]"], "outputs": [true, false, false], "innvocations": ["is_valid_URL(\"https://www.google.com\")\n", "is_valid_URL(\"https:/www.gmail.com\")\n", "is_valid_URL(\"https:// www.redit.com\")\n"]}
{"task_id": "DREval/547", "code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b\n", "entry_point": "minimum", "inputs": ["(1,2)", "(-5,-4)", "(0,0)"], "outputs": [1, -5, 0], "innvocations": ["minimum(1, 2)\n", "minimum(-5, -4)\n", "minimum(0, 0)\n"]}
{"task_id": "DREval/549", "code": "def find_Parity(x):\n    y = x ^ (x >> 1)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 16)\n    if y & 1:\n        return \"Odd Parity\"\n    return \"Even Parity\"\n", "entry_point": "find_Parity", "inputs": ["(12,)", "(7,)", "(10,)"], "outputs": ["Even Parity", "Odd Parity", "Even Parity"], "innvocations": ["find_Parity(12)\n", "find_Parity(7)\n", "find_Parity(10)\n"]}
{"task_id": "DREval/550", "code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] < nums[i + 1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n", "entry_point": "rearrange_bigger", "inputs": ["(12,)", "(10,)", "(102,)"], "outputs": [21, false, 120], "innvocations": ["rearrange_bigger(12)\n", "rearrange_bigger(10)\n", "rearrange_bigger(102)\n"]}
{"task_id": "DREval/551", "code": "import heapq\n\n\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs\n", "entry_point": "k_smallest_pairs", "inputs": ["([1,3,7],[2,4,6],2)", "([1,3,7],[2,4,6],1)", "([1,3,7],[2,4,6],7)"], "outputs": [[[1, 2], [1, 4]], [[1, 2]], [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]], "innvocations": ["k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)\n", "k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)\n", "k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)\n"]}
{"task_id": "DREval/552", "code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1])\n    return result_min\n", "entry_point": "min_product_tuple", "inputs": ["[([(2, 7), (2, 6), (1, 8), (4, 9)] ),]", "[([(10,20), (15,2), (5,10)] ),]", "[([(11,44), (10,15), (20,5), (12, 9)] ),]"], "outputs": [8, 30, 100], "innvocations": ["min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n", "min_product_tuple([(10, 20), (15, 2), (5, 10)])\n", "min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n"]}
{"task_id": "DREval/553", "code": "def min_val(listval):\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val\n", "entry_point": "min_val", "inputs": ["[(['Python', 3, 2, 4, 5, 'version']),]", "[(['Python', 15, 20, 25]),]", "[(['Python', 30, 20, 40, 50, 'version']),]"], "outputs": [2, 15, 20], "innvocations": ["min_val([\"Python\", 3, 2, 4, 5, \"version\"])\n", "min_val([\"Python\", 15, 20, 25])\n", "min_val([\"Python\", 30, 20, 40, 50, \"version\"])\n"]}
{"task_id": "DREval/555", "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\n", "entry_point": "remove_odd", "inputs": ["[([1,2,3]),]", "[([2,4,6]),]", "[([10,20,3]),]"], "outputs": [[2], [2, 4, 6], [10, 20]], "innvocations": ["remove_odd([1, 2, 3])\n", "remove_odd([2, 4, 6])\n", "remove_odd([10, 20, 3])\n"]}
{"task_id": "DREval/556", "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n", "entry_point": "extract_nth_element", "inputs": ["([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)", "([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)", "([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)"], "outputs": [["Greyson Fulton", "Brady Kent", "Wyatt Knott", "Beau Turnbull"], [99, 96, 94, 98], [98, 97, 91, 94]], "innvocations": ["extract_nth_element(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 0\n)\n", "extract_nth_element(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 2\n)\n", "extract_nth_element(\n    [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], 1\n)\n"]}
{"task_id": "DREval/557", "code": "def overlapping(list1, list2):\n    c = 0\n    d = 0\n    for i in list1:\n        c += 1\n    for i in list2:\n        d += 1\n    for i in range(0, c):\n        for j in range(0, d):\n            if list1[i] == list2[j]:\n                return 1\n    return 0\n", "entry_point": "overlapping", "inputs": ["([1,2,3,4,5],[6,7,8,9])", "([1,2,3],[4,5,6])", "([1,4,5],[1,4,5])"], "outputs": [0, 0, 1], "innvocations": ["overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n", "overlapping([1, 2, 3], [4, 5, 6])\n", "overlapping([1, 4, 5], [1, 4, 5])\n"]}
{"task_id": "DREval/558", "code": "def max_Product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return \"No pairs exists\"\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n", "entry_point": "max_Product", "inputs": ["[([1,2,3,4,7,0,8,4]),]", "[([0,-1,-2,-4,5,0,-6]),]", "[([1,2,3]),]"], "outputs": [[7, 8], [-4, -6], [2, 3]], "innvocations": ["max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n", "max_Product([0, -1, -2, -4, 5, 0, -6])\n", "max_Product([1, 2, 3])\n"]}
{"task_id": "DREval/559", "code": "MAX = 1000000\n\n\ndef breakSum(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[int(i / 2)] + dp[int(i / 3)] + dp[int(i / 4)], i)\n    return dp[n]\n", "entry_point": "breakSum", "inputs": ["(12,)", "(24,)", "(23,)"], "outputs": [13, 27, 23], "innvocations": ["breakSum(12)\n", "breakSum(24)\n", "breakSum(23)\n"]}
{"task_id": "DREval/560", "code": "def group_tuples(Input):\n    out = {}\n    for elem in Input:\n        try:\n            out[elem[0]].extend(elem[1:])\n        except KeyError:\n            out[elem[0]] = list(elem)\n    return [tuple(values) for values in out.values()]\n", "entry_point": "group_tuples", "inputs": ["[([('x', 'y'), ('x', 'z'), ('w', 't')]),]", "[([('a', 'b'), ('a', 'c'), ('d', 'e')]),]", "[([('f', 'g'), ('f', 'g'), ('h', 'i')]),]"], "outputs": [[["x", "y", "z"], ["w", "t"]], [["a", "b", "c"], ["d", "e"]], [["f", "g", "g"], ["h", "i"]]], "innvocations": ["group_tuples([(\"x\", \"y\"), (\"x\", \"z\"), (\"w\", \"t\")])\n", "group_tuples([(\"a\", \"b\"), (\"a\", \"c\"), (\"d\", \"e\")])\n", "group_tuples([(\"f\", \"g\"), (\"f\", \"g\"), (\"h\", \"i\")])\n"]}
{"task_id": "DREval/561", "code": "def Find_Max(lst):\n    maxList = max((x) for x in lst)\n    return maxList\n", "entry_point": "Find_Max", "inputs": ["[([['A'],['A','B'],['A','B','C']]),]", "[([[1],[1,2],[1,2,3]]),]", "[([[1,1],[1,2,3],[1,5,6,1]]),]"], "outputs": [["A", "B", "C"], [1, 2, 3], [1, 5, 6, 1]], "innvocations": ["Find_Max([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n", "Find_Max([[1], [1, 2], [1, 2, 3]])\n", "Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n"]}
{"task_id": "DREval/563", "code": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) * (2 * i) * (2 * i)\n    return sum\n", "entry_point": "cube_Sum", "inputs": ["(2,)", "(3,)", "(4,)"], "outputs": [72, 288, 800], "innvocations": ["cube_Sum(2)\n", "cube_Sum(3)\n", "cube_Sum(4)\n"]}
{"task_id": "DREval/565", "code": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return round(sum / n, 6)\n", "entry_point": "find_Average_Of_Cube", "inputs": ["(2,)", "(3,)", "(1,)"], "outputs": [4.5, 12.0, 1.0], "innvocations": ["find_Average_Of_Cube(2)\n", "find_Average_Of_Cube(3)\n", "find_Average_Of_Cube(1)\n"]}
{"task_id": "DREval/566", "code": "def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] for j in range(m)]\n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    return res\n", "entry_point": "get_maxgold", "inputs": ["([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)", "([[10,20],[30,40]],2,2)", "([[4,9],[3,7]],2,2)"], "outputs": [16, 70, 13], "innvocations": ["get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n", "get_maxgold([[10, 20], [30, 40]], 2, 2)\n", "get_maxgold([[4, 9], [3, 7]], 2, 2)\n"]}
{"task_id": "DREval/567", "code": "def extract_rear(test_tuple):\n    res = list(sub[len(sub) - 1] for sub in test_tuple)\n    return res\n", "entry_point": "extract_rear", "inputs": ["[(('Mers', 'for', 'Vers') ),]", "[(('Avenge', 'for', 'People') ),]", "[(('Gotta', 'get', 'go') ),]"], "outputs": [["s", "r", "s"], ["e", "r", "e"], ["a", "t", "o"]], "innvocations": ["extract_rear((\"Mers\", \"for\", \"Vers\"))\n", "extract_rear((\"Avenge\", \"for\", \"People\"))\n", "extract_rear((\"Gotta\", \"get\", \"go\"))\n"]}
{"task_id": "DREval/568", "code": "def count_element_in_list(list1, x):\n    ctr = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            ctr += 1\n    return ctr\n", "entry_point": "count_element_in_list", "inputs": ["([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)", "([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')", "([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')"], "outputs": [3, 3, 1], "innvocations": ["count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n", "count_element_in_list([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n", "count_element_in_list([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n"]}
{"task_id": "DREval/569", "code": "def filter_oddnumbers(nums):\n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums\n", "entry_point": "filter_oddnumbers", "inputs": ["[([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),]", "[([10,20,45,67,84,93]),]", "[([5,7,9,8,6,4,3]),]"], "outputs": [[1, 3, 5, 7, 9], [45, 67, 93], [5, 7, 9, 3]], "innvocations": ["filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n", "filter_oddnumbers([10, 20, 45, 67, 84, 93])\n", "filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])\n"]}
{"task_id": "DREval/571", "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\n", "entry_point": "shell_sort", "inputs": ["[([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]),]", "[([24, 22, 39, 34, 87, 73, 68]),]", "[([32, 30, 16, 96, 82, 83, 74]),]"], "outputs": [[2, 3, 4, 5, 12, 12, 23, 56, 81, 95], [22, 24, 34, 39, 68, 73, 87], [16, 30, 32, 74, 82, 83, 96]], "innvocations": ["shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n", "shell_sort([24, 22, 39, 34, 87, 73, 68])\n", "shell_sort([32, 30, 16, 96, 82, 83, 74])\n"]}
{"task_id": "DREval/572", "code": "def and_tuples(test_tup1, test_tup2):\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "and_tuples", "inputs": ["((10, 4, 6, 9), (5, 2, 3, 3))", "((1, 2, 3, 4), (5, 6, 7, 8))", "((8, 9, 11, 12), (7, 13, 14, 17))"], "outputs": [[0, 0, 2, 1], [1, 2, 3, 0], [0, 9, 10, 0]], "innvocations": ["and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n", "and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n", "and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n"]}
{"task_id": "DREval/573", "code": "def parabola_directrix(a, b, c):\n    directrix = (int)(c - ((b * b) + 1) * 4 * a)\n    return directrix\n", "entry_point": "parabola_directrix", "inputs": ["(5,3,2)", "(9,8,4)", "(2,4,6)"], "outputs": [-198, -2336, -130], "innvocations": ["parabola_directrix(5, 3, 2)\n", "parabola_directrix(9, 8, 4)\n", "parabola_directrix(2, 4, 6)\n"]}
{"task_id": "DREval/574", "code": "def common_element(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\n", "entry_point": "common_element", "inputs": ["([1,2,3,4,5], [5,6,7,8,9])", "([1,2,3,4,5], [6,7,8,9])", "(['a','b','c'], ['d','b','e'])"], "outputs": [true, null, true], "innvocations": ["common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n", "common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])\n", "common_element([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n"]}
{"task_id": "DREval/575", "code": "def median_trapezium(base1, base2, height):\n    median = 0.5 * (base1 + base2)\n    return median\n", "entry_point": "median_trapezium", "inputs": ["(15,25,35)", "(10,20,30)", "(6,9,4)"], "outputs": [20.0, 15.0, 7.5], "innvocations": ["median_trapezium(15, 25, 35)\n", "median_trapezium(10, 20, 30)\n", "median_trapezium(6, 9, 4)\n"]}
{"task_id": "DREval/576", "code": "def check_greater(arr, number):\n    arr.sort()\n    if number > arr[-1]:\n        return \"Yes, the entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n", "entry_point": "check_greater", "inputs": ["([1, 2, 3, 4, 5], 4)", "([2, 3, 4, 5, 6], 8)", "([9, 7, 4, 8, 6, 1], 11)"], "outputs": ["No, entered number is less than those in the array", "Yes, the entered number is greater than those in the array", "Yes, the entered number is greater than those in the array"], "innvocations": ["check_greater([1, 2, 3, 4, 5], 4)\n", "check_greater([2, 3, 4, 5, 6], 8)\n", "check_greater([9, 7, 4, 8, 6, 1], 11)\n"]}
{"task_id": "DREval/579", "code": "def neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            return num\n", "entry_point": "neg_nos", "inputs": ["[([-1,4,5,-6]),]", "[([-1,-2,3,4]),]", "[([-7,-6,8,9]),]"], "outputs": [-1, -1, -7], "innvocations": ["neg_nos([-1, 4, 5, -6])\n", "neg_nos([-1, -2, 3, 4])\n", "neg_nos([-7, -6, 8, 9])\n"]}
{"task_id": "DREval/580", "code": "def remove_odd(str1):\n    str2 = \"\"\n    for i in range(1, len(str1) + 1):\n        if i % 2 == 0:\n            str2 = str2 + str1[i - 1]\n    return str2\n", "entry_point": "remove_odd", "inputs": ["[(\"python\"),]", "[(\"program\"),]", "[(\"language\"),]"], "outputs": ["yhn", "rga", "agae"], "innvocations": ["remove_odd(\"python\")\n", "remove_odd(\"program\")\n", "remove_odd(\"language\")\n"]}
{"task_id": "DREval/581", "code": "def count_bidirectional(test_list):\n    res = 0\n    for idx in range(0, len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n            if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n                res += 1\n    return str(res)\n", "entry_point": "count_bidirectional", "inputs": ["[([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ),]", "[([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ),]", "[([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ),]"], "outputs": ["3", "2", "4"], "innvocations": ["count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\n", "count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])\n", "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])\n"]}
{"task_id": "DREval/582", "code": "def multiple_to_single(L):\n    x = int(\"\".join(map(str, L)))\n    return x\n", "entry_point": "multiple_to_single", "inputs": ["[([11, 33, 50]),]", "[([-1,2,3,4,5,6]),]", "[([10,15,20,25]),]"], "outputs": [113350, -123456, 10152025], "innvocations": ["multiple_to_single([11, 33, 50])\n", "multiple_to_single([-1, 2, 3, 4, 5, 6])\n", "multiple_to_single([10, 15, 20, 25])\n"]}
{"task_id": "DREval/584", "code": "def surfacearea_cube(l):\n    surfacearea = 6 * l * l\n    return surfacearea\n", "entry_point": "surfacearea_cube", "inputs": ["(5,)", "(3,)", "(10,)"], "outputs": [150, 54, 600], "innvocations": ["surfacearea_cube(5)\n", "surfacearea_cube(3)\n", "surfacearea_cube(10)\n"]}
{"task_id": "DREval/585", "code": "from array import array\n\n\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "entry_point": "positive_count", "inputs": ["[([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]),]", "[([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),]", "[([2, 4, -6, -9, 11, -12, 14, -5, 17]),]"], "outputs": [0.54, 0.69, 0.56], "innvocations": ["positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n", "positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n", "positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n"]}
{"task_id": "DREval/586", "code": "def largest_neg(list1):\n    max = list1[0]\n    for x in list1:\n        if x < max:\n            max = x\n    return max\n", "entry_point": "largest_neg", "inputs": ["[([1,2,3,-4,-6]),]", "[([1,2,3,-8,-9]),]", "[([1,2,3,4,-1]),]"], "outputs": [-6, -9, -1], "innvocations": ["largest_neg([1, 2, 3, -4, -6])\n", "largest_neg([1, 2, 3, -8, -9])\n", "largest_neg([1, 2, 3, 4, -1])\n"]}
{"task_id": "DREval/587", "code": "def trim_tuple(test_list, K):\n    res = []\n    for ele in test_list:\n        N = len(ele)\n        res.append(tuple(list(ele)[K : N - K]))\n    return str(res)\n", "entry_point": "trim_tuple", "inputs": ["([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)", "([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)", "([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)"], "outputs": ["[(2,), (9,), (2,), (2,)]", "[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]", "[(8, 4), (8, 12), (1, 7), (6, 9)]"], "innvocations": ["trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n", "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n", "trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)\n"]}
{"task_id": "DREval/588", "code": "def index_multiplication(test_tup1, test_tup2):\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n    return res\n", "entry_point": "index_multiplication", "inputs": ["(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )", "(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )", "(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )"], "outputs": [[[6, 21], [12, 45], [2, 9], [7, 30]], [[14, 32], [20, 60], [6, 20], [16, 44]], [[24, 45], [30, 77], [12, 33], [27, 60]]], "innvocations": ["index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n", "index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n", "index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n"]}
{"task_id": "DREval/589", "code": "from collections import Counter\n\n\ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count\n", "entry_point": "count_Occurrence", "inputs": ["(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )", "((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])", "((1,2,3,4,5,6),[1,2])"], "outputs": [3, 6, 2], "innvocations": ["count_Occurrence((\"a\", \"a\", \"c\", \"b\", \"d\"), [\"a\", \"b\"])\n", "count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])\n", "count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])\n"]}
{"task_id": "DREval/590", "code": "def cube_nums(nums):\n    cube_nums = list(map(lambda x: x**3, nums))\n    return cube_nums\n", "entry_point": "cube_nums", "inputs": ["[([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),]", "[([10,20,30]),]", "[([12,15]),]"], "outputs": [[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], [1000, 8000, 27000], [1728, 3375]], "innvocations": ["cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n", "cube_nums([10, 20, 30])\n", "cube_nums([12, 15])\n"]}
{"task_id": "DREval/591", "code": "def cal_sum(n):\n    a = 3\n    b = 0\n    c = 2\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    sum = 5\n    while n > 2:\n        d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n        n = n - 1\n    return sum\n", "entry_point": "cal_sum", "inputs": ["(9,)", "(10,)", "(11,)"], "outputs": [49, 66, 88], "innvocations": ["cal_sum(9)\n", "cal_sum(10)\n", "cal_sum(11)\n"]}
{"task_id": "DREval/592", "code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    if a == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n", "entry_point": "check_Triangle", "inputs": ["(1,5,2,5,4,6)", "(1,1,1,4,1,5)", "(1,1,1,1,1,1)"], "outputs": ["Yes", "No", "No"], "innvocations": ["check_Triangle(1, 5, 2, 5, 4, 6)\n", "check_Triangle(1, 1, 1, 4, 1, 5)\n", "check_Triangle(1, 1, 1, 1, 1, 1)\n"]}
{"task_id": "DREval/593", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l]\n    return result\n", "entry_point": "extract_string", "inputs": ["(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)", "(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)", "(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)"], "outputs": [["practice", "solution"], ["Python"], ["exercises"]], "innvocations": ["extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n", "extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n", "extract_string([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n"]}
{"task_id": "DREval/595", "code": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        return None\n", "entry_point": "loss_amount", "inputs": ["(1500,1200)", "(100,200)", "(2000,5000)"], "outputs": [null, 100, 3000], "innvocations": ["loss_amount(1500, 1200)\n", "loss_amount(100, 200)\n", "loss_amount(2000, 5000)\n"]}
{"task_id": "DREval/596", "code": "import math\n\n\ndef sumofFactors(n):\n    if n % 2 != 0:\n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count = count + 1\n            n = n // i\n            if i == 2 and count == 1:\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if n >= 2:\n        res = res * (1 + n)\n    return res\n", "entry_point": "sumofFactors", "inputs": ["(18,)", "(30,)", "(6,)"], "outputs": [26, 48, 8], "innvocations": ["sumofFactors(18)\n", "sumofFactors(30)\n", "sumofFactors(6)\n"]}
{"task_id": "DREval/599", "code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\n", "entry_point": "reverse_string_list", "inputs": ["[(['Red', 'Green', 'Blue', 'White', 'Black']),]", "[(['john','amal','joel','george']),]", "[(['jack','john','mary']),]"], "outputs": [["deR", "neerG", "eulB", "etihW", "kcalB"], ["nhoj", "lama", "leoj", "egroeg"], ["kcaj", "nhoj", "yram"]], "innvocations": ["reverse_string_list([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n", "reverse_string_list([\"john\", \"amal\", \"joel\", \"george\"])\n", "reverse_string_list([\"jack\", \"john\", \"mary\"])\n"]}
{"task_id": "DREval/600", "code": "def Find_Min(lst):\n    minList = min((x) for x in lst)\n    return minList\n", "entry_point": "Find_Min", "inputs": ["[([[1],[1,2],[1,2,3]]),]", "[([[1,1],[1,1,1],[1,2,7,8]]),]", "[([['x'],['x','y'],['x','y','z']]),]"], "outputs": [[1], [1, 1], ["x"]], "innvocations": ["Find_Min([[1], [1, 2], [1, 2, 3]])\n", "Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n", "Find_Min([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n"]}
{"task_id": "DREval/601", "code": "def rectangle_area(l, b):\n    area = l * b\n    return area\n", "entry_point": "rectangle_area", "inputs": ["(10,20)", "(10,5)", "(4,2)"], "outputs": [200, 50, 8], "innvocations": ["rectangle_area(10, 20)\n", "rectangle_area(10, 5)\n", "rectangle_area(4, 2)\n"]}
{"task_id": "DREval/602", "code": "import re\n\n\ndef remove_uppercase(str1):\n    remove_upper = lambda text: re.sub(\"[A-Z]\", \"\", text)\n    result = remove_upper(str1)\n    return result\n", "entry_point": "remove_uppercase", "inputs": ["[('cAstyoUrFavoRitETVshoWs'),]", "[('wAtchTheinTernEtrAdIo'),]", "[('VoicESeaRchAndreComMendaTionS'),]"], "outputs": ["cstyoravoitshos", "wtchheinerntrdo", "oiceachndreomendaion"], "innvocations": ["remove_uppercase(\"cAstyoUrFavoRitETVshoWs\")\n", "remove_uppercase(\"wAtchTheinTernEtrAdIo\")\n", "remove_uppercase(\"VoicESeaRchAndreComMendaTionS\")\n"]}
{"task_id": "DREval/604", "code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n        if str[i] >= \"A\" and str[i] <= \"Z\":\n            upper_ctr += 1\n        return upper_ctr\n", "entry_point": "upper_ctr", "inputs": ["[('PYthon'),]", "[('BigData'),]", "[('program'),]"], "outputs": [1, 1, 0], "innvocations": ["upper_ctr(\"PYthon\")\n", "upper_ctr(\"BigData\")\n", "upper_ctr(\"program\")\n"]}
{"task_id": "DREval/605", "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el + [list1[0]]]\n    return result\n", "entry_point": "combinations_list", "inputs": ["[(['orange', 'red', 'green', 'blue']),]", "[(['red', 'green', 'blue', 'white', 'black', 'orange']),]", "[(['red', 'green', 'black', 'orange']),]"], "outputs": [[[], ["orange"], ["red"], ["red", "orange"], ["green"], ["green", "orange"], ["green", "red"], ["green", "red", "orange"], ["blue"], ["blue", "orange"], ["blue", "red"], ["blue", "red", "orange"], ["blue", "green"], ["blue", "green", "orange"], ["blue", "green", "red"], ["blue", "green", "red", "orange"]], [[], ["red"], ["green"], ["green", "red"], ["blue"], ["blue", "red"], ["blue", "green"], ["blue", "green", "red"], ["white"], ["white", "red"], ["white", "green"], ["white", "green", "red"], ["white", "blue"], ["white", "blue", "red"], ["white", "blue", "green"], ["white", "blue", "green", "red"], ["black"], ["black", "red"], ["black", "green"], ["black", "green", "red"], ["black", "blue"], ["black", "blue", "red"], ["black", "blue", "green"], ["black", "blue", "green", "red"], ["black", "white"], ["black", "white", "red"], ["black", "white", "green"], ["black", "white", "green", "red"], ["black", "white", "blue"], ["black", "white", "blue", "red"], ["black", "white", "blue", "green"], ["black", "white", "blue", "green", "red"], ["orange"], ["orange", "red"], ["orange", "green"], ["orange", "green", "red"], ["orange", "blue"], ["orange", "blue", "red"], ["orange", "blue", "green"], ["orange", "blue", "green", "red"], ["orange", "white"], ["orange", "white", "red"], ["orange", "white", "green"], ["orange", "white", "green", "red"], ["orange", "white", "blue"], ["orange", "white", "blue", "red"], ["orange", "white", "blue", "green"], ["orange", "white", "blue", "green", "red"], ["orange", "black"], ["orange", "black", "red"], ["orange", "black", "green"], ["orange", "black", "green", "red"], ["orange", "black", "blue"], ["orange", "black", "blue", "red"], ["orange", "black", "blue", "green"], ["orange", "black", "blue", "green", "red"], ["orange", "black", "white"], ["orange", "black", "white", "red"], ["orange", "black", "white", "green"], ["orange", "black", "white", "green", "red"], ["orange", "black", "white", "blue"], ["orange", "black", "white", "blue", "red"], ["orange", "black", "white", "blue", "green"], ["orange", "black", "white", "blue", "green", "red"]], [[], ["red"], ["green"], ["green", "red"], ["black"], ["black", "red"], ["black", "green"], ["black", "green", "red"], ["orange"], ["orange", "red"], ["orange", "green"], ["orange", "green", "red"], ["orange", "black"], ["orange", "black", "red"], ["orange", "black", "green"], ["orange", "black", "green", "red"]]], "innvocations": ["combinations_list([\"orange\", \"red\", \"green\", \"blue\"])\n", "combinations_list([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n", "combinations_list([\"red\", \"green\", \"black\", \"orange\"])\n"]}
{"task_id": "DREval/606", "code": "def max_subarray_product(arr):\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    for i in range(0, n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 0:\n        return 0\n    return max_so_far\n", "entry_point": "max_subarray_product", "inputs": ["[([1, -2, -3, 0, 7, -8, -2]),]", "[([6, -3, -10, 0, 2]),]", "[([-2, -40, 0, -2, -3]),]"], "outputs": [112, 180, 80], "innvocations": ["max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n", "max_subarray_product([6, -3, -10, 0, 2])\n", "max_subarray_product([-2, -40, 0, -2, -3])\n"]}
{"task_id": "DREval/607", "code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values())\n    return result\n", "entry_point": "check_value", "inputs": ["({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)", "({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)", "({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)"], "outputs": [false, true, false], "innvocations": ["check_value({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10)\n", "check_value({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12)\n", "check_value({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5)\n"]}
{"task_id": "DREval/608", "code": "def drop_empty(dict1):\n    dict1 = {key: value for (key, value) in dict1.items() if value is not None}\n    return dict1\n", "entry_point": "drop_empty", "inputs": ["[({'c1': 'Red', 'c2': 'Green', 'c3':None}),]", "[({'c1': 'Red', 'c2': None, 'c3':None}),]", "[({'c1': None, 'c2': 'Green', 'c3':None}),]"], "outputs": [{"c1": "Red", "c2": "Green"}, {"c1": "Red"}, {"c2": "Green"}], "innvocations": ["drop_empty({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": None})\n", "drop_empty({\"c1\": \"Red\", \"c2\": None, \"c3\": None})\n", "drop_empty({\"c1\": None, \"c2\": \"Green\", \"c3\": None})\n"]}
{"task_id": "DREval/609", "code": "def find_peak_util(arr, low, high, n):\n    mid = low + (high - low) / 2\n    mid = int(mid)\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n\n\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)\n", "entry_point": "find_peak", "inputs": ["([1, 3, 20, 4, 1, 0], 6)", "([2, 3, 4, 5, 6], 5)", "([8, 9, 11, 12, 14, 15], 6)"], "outputs": [2, 4, 5], "innvocations": ["find_peak([1, 3, 20, 4, 1, 0], 6)\n", "find_peak([2, 3, 4, 5, 6], 5)\n", "find_peak([8, 9, 11, 12, 14, 15], 6)\n"]}
{"task_id": "DREval/610", "code": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1\n    dNo = deciNum\n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval = countval * 10\n        deciNum //= 8\n    return octalNum\n", "entry_point": "decimal_to_Octal", "inputs": ["(10,)", "(2,)", "(33,)"], "outputs": [12, 2, 41], "innvocations": ["decimal_to_Octal(10)\n", "decimal_to_Octal(2)\n", "decimal_to_Octal(33)\n"]}
{"task_id": "DREval/611", "code": "def max_product(arr, n):\n    mpis = [0] * (n)\n    for i in range(n):\n        mpis[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and mpis[i] < (mpis[j] * arr[i]):\n                mpis[i] = mpis[j] * arr[i]\n    return max(mpis)\n", "entry_point": "max_product", "inputs": ["([3, 100, 4, 5, 150, 6], 6)", "([4, 42, 55, 68, 80], 5)", "([10, 22, 9, 33, 21, 50, 41, 60], 8)"], "outputs": [45000, 50265600, 21780000], "innvocations": ["max_product([3, 100, 4, 5, 150, 6], 6)\n", "max_product([4, 42, 55, 68, 80], 5)\n", "max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n"]}
{"task_id": "DREval/612", "code": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i - 1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j - 1], max_so_far)\n    return final_profit[k][n - 1]\n", "entry_point": "max_profit", "inputs": ["([1, 5, 2, 3, 7, 6, 4, 5], 3)", "([2, 4, 7, 5, 4, 3, 5], 2)", "([10, 6, 8, 4, 2], 2)"], "outputs": [10, 7, 2], "innvocations": ["max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n", "max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n", "max_profit([10, 6, 8, 4, 2], 2)\n"]}
{"task_id": "DREval/613", "code": "def add_pairwise(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "entry_point": "add_pairwise", "inputs": ["[((1, 5, 7, 8, 10)),]", "[((2, 6, 8, 9, 11)),]", "[((3, 7, 9, 10, 12)),]"], "outputs": [[6, 12, 15, 18], [8, 14, 17, 20], [10, 16, 19, 22]], "innvocations": ["add_pairwise((1, 5, 7, 8, 10))\n", "add_pairwise((2, 6, 8, 9, 11))\n", "add_pairwise((3, 7, 9, 10, 12))\n"]}
{"task_id": "DREval/614", "code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):\n        mul = (mul * (arr[i] % n)) % n\n    return mul % n\n", "entry_point": "find_remainder", "inputs": ["([ 100, 10, 5, 25, 35, 14 ],6,11)", "([1,1,1],3,1)", "([1,2,1],3,2)"], "outputs": [9, 0, 0], "innvocations": ["find_remainder([100, 10, 5, 25, 35, 14], 6, 11)\n", "find_remainder([1, 1, 1], 3, 1)\n", "find_remainder([1, 2, 1], 3, 2)\n"]}
{"task_id": "DREval/617", "code": "def replace_char(str1, ch, newch):\n    str2 = str1.replace(ch, newch)\n    return str2\n", "entry_point": "replace_char", "inputs": ["(\"polygon\",'y','l')", "(\"character\",'c','a')", "(\"python\",'l','a')"], "outputs": ["pollgon", "aharaater", "python"], "innvocations": ["replace_char(\"polygon\", \"y\", \"l\")\n", "replace_char(\"character\", \"c\", \"a\")\n", "replace_char(\"python\", \"l\", \"a\")\n"]}
{"task_id": "DREval/618", "code": "from collections import Counter\n\n\ndef sort_counter(dict1):\n    x = Counter(dict1)\n    sort_counter = x.most_common()\n    return sort_counter\n", "entry_point": "sort_counter", "inputs": ["[({'Math':81, 'Physics':83, 'Chemistry':87}),]", "[({'Math':400, 'Physics':300, 'Chemistry':250}),]", "[({'Math':900, 'Physics':1000, 'Chemistry':1250}),]"], "outputs": [[["Chemistry", 87], ["Physics", 83], ["Math", 81]], [["Math", 400], ["Physics", 300], ["Chemistry", 250]], [["Chemistry", 1250], ["Physics", 1000], ["Math", 900]]], "innvocations": ["sort_counter({\"Math\": 81, \"Physics\": 83, \"Chemistry\": 87})\n", "sort_counter({\"Math\": 400, \"Physics\": 300, \"Chemistry\": 250})\n", "sort_counter({\"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250})\n"]}
{"task_id": "DREval/619", "code": "def big_sum(nums):\n    sum = max(nums) + min(nums)\n    return sum\n", "entry_point": "big_sum", "inputs": ["[([1,2,3]),]", "[([-1,2,3,4]),]", "[([2,3,6]),]"], "outputs": [4, 3, 8], "innvocations": ["big_sum([1, 2, 3])\n", "big_sum([-1, 2, 3, 4])\n", "big_sum([2, 3, 6])\n"]}
{"task_id": "DREval/621", "code": "import re\n\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub(\"[a-z]\", \"\", text)\n    result = remove_lower(str1)\n    return result\n", "entry_point": "remove_lowercase", "inputs": ["[(\"PYTHon\"),]", "[(\"FInD\"),]", "[(\"STRinG\"),]"], "outputs": ["PYTH", "FID", "STRG"], "innvocations": ["remove_lowercase(\"PYTHon\")\n", "remove_lowercase(\"FInD\")\n", "remove_lowercase(\"STRinG\")\n"]}
{"task_id": "DREval/622", "code": "def first_Digit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n)\n", "entry_point": "first_Digit", "inputs": ["(123,)", "(456,)", "(12,)"], "outputs": [1, 4, 1], "innvocations": ["first_Digit(123)\n", "first_Digit(456)\n", "first_Digit(12)\n"]}
{"task_id": "DREval/623", "code": "def get_max_occuring_char(str1):\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max = -1\n    ch = \"\"\n    for i in str1:\n        ctr[ord(i)] += 1\n    for i in str1:\n        if max < ctr[ord(i)]:\n            max = ctr[ord(i)]\n            ch = i\n    return ch\n", "entry_point": "get_max_occuring_char", "inputs": ["[(\"data\"),]", "[(\"create\"),]", "[(\"brilliant girl\"),]"], "outputs": ["a", "e", "i"], "innvocations": ["get_max_occuring_char(\"data\")\n", "get_max_occuring_char(\"create\")\n", "get_max_occuring_char(\"brilliant girl\")\n"]}
{"task_id": "DREval/626", "code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    fact = 1\n    for i in range(1, x):\n        fact = fact * i\n        if fact % x == 0:\n            break\n    return i\n", "entry_point": "first_Factorial_Divisible_Number", "inputs": ["(10,)", "(15,)", "(5,)"], "outputs": [5, 5, 4], "innvocations": ["first_Factorial_Divisible_Number(10)\n", "first_Factorial_Divisible_Number(15)\n", "first_Factorial_Divisible_Number(5)\n"]}
{"task_id": "DREval/627", "code": "def remove_matching_tuple(test_list1, test_list2):\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return res\n", "entry_point": "remove_matching_tuple", "inputs": ["([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])", "([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])", "([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])"], "outputs": [[["you", "?"]], [["Part", "of"], ["the", "journey"], ["is ", "end"]], [["Its", "been"], ["day", "without"]]], "innvocations": ["remove_matching_tuple([(\"Hello\", \"dude\"), (\"How\", \"are\"), (\"you\", \"?\")], [(\"Hello\", \"dude\"), (\"How\", \"are\")])\n", "remove_matching_tuple([(\"Part\", \"of\"), (\"the\", \"journey\"), (\"is \", \"end\")], [(\"Journey\", \"the\"), (\"is\", \"end\")])\n", "remove_matching_tuple([(\"Its\", \"been\"), (\"a\", \"long\"), (\"day\", \"without\")], [(\"a\", \"long\"), (\"my\", \"friend\")])\n"]}
{"task_id": "DREval/628", "code": "def is_palindrome(n):\n    divisor = 1\n    while n / divisor >= 10:\n        divisor *= 10\n    while n != 0:\n        leading = n // divisor\n        trailing = n % 10\n        if leading != trailing:\n            return False\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n    return True\n\n\ndef largest_palindrome(A, n):\n    A.sort()\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(A[i]):\n            return A[i]\n    return -1\n", "entry_point": "largest_palindrome", "inputs": ["([1, 232, 54545, 999991], 4)", "([1, 2, 3, 4, 5, 50], 6)", "([1, 3, 7, 9, 45], 5)"], "outputs": [54545, 5, 9], "innvocations": ["largest_palindrome([1, 232, 54545, 999991], 4)\n", "largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n", "largest_palindrome([1, 3, 7, 9, 45], 5)\n"]}
{"task_id": "DREval/629", "code": "def nCr(n, r):\n    if r > n / 2:\n        r = n - r\n    answer = 1\n    for i in range(1, r + 1):\n        answer *= n - r + i\n        answer /= i\n    return answer\n\n\ndef binomial_probability(n, k, p):\n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k)\n", "entry_point": "binomial_probability", "inputs": ["(10, 5, 1.0/3)", "(11, 6, 2.0/4)", "(12, 7, 3.0/5)"], "outputs": [0.13656454808718185, 0.2255859375, 0.227030335488], "innvocations": ["binomial_probability(10, 5, 1.0 / 3)\n", "binomial_probability(11, 6, 2.0 / 4)\n", "binomial_probability(12, 7, 3.0 / 5)\n"]}
{"task_id": "DREval/630", "code": "def sort_tuple(tup):\n    lst = len(tup)\n    for i in range(0, lst):\n        for j in range(0, lst - i - 1):\n            if tup[j][-1] > tup[j + 1][-1]:\n                temp = tup[j]\n                tup[j] = tup[j + 1]\n                tup[j + 1] = temp\n    return tup\n", "entry_point": "sort_tuple", "inputs": ["[([(1, 3), (3, 2), (2, 1)] ),]", "[([(2, 4), (3, 3), (1, 1)] ),]", "[([(3, 9), (6, 7), (4, 3)] ),]"], "outputs": [[[2, 1], [3, 2], [1, 3]], [[1, 1], [3, 3], [2, 4]], [[4, 3], [6, 7], [3, 9]]], "innvocations": ["sort_tuple([(1, 3), (3, 2), (2, 1)])\n", "sort_tuple([(2, 4), (3, 3), (1, 1)])\n", "sort_tuple([(3, 9), (6, 7), (4, 3)])\n"]}
{"task_id": "DREval/631", "code": "import math\n\n\ndef area_pentagon(a):\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2)) / 4.0\n    return area\n", "entry_point": "area_pentagon", "inputs": ["(5,)", "(10,)", "(15,)"], "outputs": [43.01193501472417, 172.0477400588967, 387.10741513251753], "innvocations": ["area_pentagon(5)\n", "area_pentagon(10)\n", "area_pentagon(15)\n"]}
{"task_id": "DREval/632", "code": "def frequency_Of_Largest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n", "entry_point": "frequency_Of_Largest", "inputs": ["(5,[1,2,3,4,4])", "(3,[5,6,5])", "(4,[2,7,7,7])"], "outputs": [2, 1, 3], "innvocations": ["frequency_Of_Largest(5, [1, 2, 3, 4, 4])\n", "frequency_Of_Largest(3, [5, 6, 5])\n", "frequency_Of_Largest(4, [2, 7, 7, 7])\n"]}
{"task_id": "DREval/634", "code": "import math\n\n\ndef sum_gp(a, n, r):\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total\n", "entry_point": "sum_gp", "inputs": ["(1,5,2)", "(1,5,4)", "(2,6,3)"], "outputs": [31.0, 341.0, 728.0], "innvocations": ["sum_gp(1, 5, 2)\n", "sum_gp(1, 5, 4)\n", "sum_gp(2, 6, 3)\n"]}
{"task_id": "DREval/635", "code": "def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n", "entry_point": "binary_search", "inputs": ["([1,2,3,5,8], 6)", "([7, 8, 9, 10, 13], 10)", "([11, 13, 14, 19, 22, 36], 23)"], "outputs": [false, true, false], "innvocations": ["binary_search([1, 2, 3, 5, 8], 6)\n", "binary_search([7, 8, 9, 10, 13], 10)\n", "binary_search([11, 13, 14, 19, 22, 36], 23)\n"]}
{"task_id": "DREval/636", "code": "import math\n\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [(p1x, p1y), (p2x, p2y), (p3x, p3y), (p4x, p4y), (p5x, p5y), (p6x, p6y), (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons\n", "entry_point": "calculate_polygons", "inputs": ["(1,1, 4, 4, 3)", "(5,4,7,9,8)", "(9,6,4,3,2)"], "outputs": [[[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]], [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]], [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]]], "innvocations": ["calculate_polygons(1, 1, 4, 4, 3)\n", "calculate_polygons(5, 4, 7, 9, 8)\n", "calculate_polygons(9, 6, 4, 3, 2)\n"]}
{"task_id": "DREval/638", "code": "import re\n\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub(\"[a-z]\", \"\", text)\n    result = remove_lower(str1)\n    return result\n", "entry_point": "remove_lowercase", "inputs": ["[('KDeoALOklOOHserfLoAJSIskdsf'),]", "[('ProducTnamEstreAmIngMediAplAYer'),]", "[('maNufacTuredbYSheZenTechNolOGIes'),]"], "outputs": ["KDALOOOHLAJSI", "PTEAIMAAY", "NTYSZTNOGI"], "innvocations": ["remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n", "remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n", "remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n"]}
{"task_id": "DREval/639", "code": "import heapq as hq\n\n\ndef heap_queue_smallest(nums, n):\n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums\n", "entry_point": "heap_queue_smallest", "inputs": ["( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)", "( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)", "( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)"], "outputs": [[14, 22, 25], [14, 22], [14, 22, 22, 25, 35]], "innvocations": ["heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n", "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n", "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n"]}
{"task_id": "DREval/640", "code": "import math\n\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    SA = math.pi * r * (r + l)\n    return SA\n", "entry_point": "surfacearea_cone", "inputs": ["(5,12)", "(10,15)", "(19,17)"], "outputs": [282.7433388230814, 880.5179353159282, 2655.923961165254], "innvocations": ["surfacearea_cone(5, 12)\n", "surfacearea_cone(10, 15)\n", "surfacearea_cone(19, 17)\n"]}
{"task_id": "DREval/641", "code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break\n    return gcd\n", "entry_point": "gcd", "inputs": ["(12, 17)", "(4,6)", "(2,9)"], "outputs": [1, 2, 1], "innvocations": ["gcd(12, 17)\n", "gcd(4, 6)\n", "gcd(2, 9)\n"]}
{"task_id": "DREval/642", "code": "def diameter_circle(r):\n    diameter = 2 * r\n    return diameter\n", "entry_point": "diameter_circle", "inputs": ["(10,)", "(40,)", "(15,)"], "outputs": [20, 80, 30], "innvocations": ["diameter_circle(10)\n", "diameter_circle(40)\n", "diameter_circle(15)\n"]}
{"task_id": "DREval/643", "code": "def concatenate_elements(list):\n    ans = \" \"\n    for i in list:\n        ans = ans + \" \" + i\n    return ans\n", "entry_point": "concatenate_elements", "inputs": ["[(['hello','there','have','a','rocky','day'] ),]", "[([ 'Hi', 'there', 'How','are', 'you'] ),]", "[([ 'Part', 'of', 'the','journey', 'is', 'end'] ),]"], "outputs": ["  hello there have a rocky day", "  Hi there How are you", "  Part of the journey is end"], "innvocations": ["concatenate_elements([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n", "concatenate_elements([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n", "concatenate_elements([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n"]}
{"task_id": "DREval/644", "code": "def ngcd(x, y):\n    i = 1\n    while i <= x and i <= y:\n        if x % i == 0 and y % i == 0:\n            gcd = i\n        i += 1\n    return gcd\n\n\ndef num_comm_div(x, y):\n    n = ngcd(x, y)\n    result = 0\n    z = int(n**0.5)\n    i = 1\n    while i <= z:\n        if n % i == 0:\n            result += 2\n            if i == n / i:\n                result -= 1\n        i += 1\n    return result\n", "entry_point": "num_comm_div", "inputs": ["(2,4)", "(2,8)", "(12,24)"], "outputs": [2, 2, 6], "innvocations": ["num_comm_div(2, 4)\n", "num_comm_div(2, 8)\n", "num_comm_div(12, 24)\n"]}
{"task_id": "DREval/645", "code": "def find(n, m):\n    r = n % m\n    return r\n", "entry_point": "find", "inputs": ["(3,3)", "(10,3)", "(16,5)"], "outputs": [0, 1, 1], "innvocations": ["find(3, 3)\n", "find(10, 3)\n", "find(16, 5)\n"]}
{"task_id": "DREval/646", "code": "def add_consecutive_nums(nums):\n    result = [b + a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n", "entry_point": "add_consecutive_nums", "inputs": ["[([1, 1, 3, 4, 4, 5, 6, 7]),]", "[([4, 5, 8, 9, 6, 10]),]", "[([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),]"], "outputs": [[2, 4, 7, 8, 9, 11, 13], [9, 13, 17, 15, 16], [3, 5, 7, 9, 11, 13, 15, 17, 19]], "innvocations": ["add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n", "add_consecutive_nums([4, 5, 8, 9, 6, 10])\n", "add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"]}
{"task_id": "DREval/647", "code": "def sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return sum\n", "entry_point": "sum_Of_Series", "inputs": ["(5,)", "(2,)", "(3,)"], "outputs": [225, 9, 36], "innvocations": ["sum_Of_Series(5)\n", "sum_Of_Series(2)\n", "sum_Of_Series(3)\n"]}
{"task_id": "DREval/648", "code": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A\n", "entry_point": "re_order", "inputs": ["[([6, 0, 8, 2, 3, 0, 4, 0, 1]),]", "[([4, 0, 2, 7, 0, 9, 0, 12, 0]),]", "[([3, 11, 0, 74, 14, 0, 1, 0, 2]),]"], "outputs": [[6, 8, 2, 3, 4, 1, 0, 0, 0], [4, 2, 7, 9, 12, 0, 0, 0, 0], [3, 11, 74, 14, 1, 2, 0, 0, 0]], "innvocations": ["re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n", "re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n", "re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n"]}
{"task_id": "DREval/649", "code": "def permutation_coefficient(n, k):\n    P = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0:\n                P[i][j] = 1\n            else:\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1])\n            if j < k:\n                P[i][j + 1] = 0\n    return P[n][k]\n", "entry_point": "permutation_coefficient", "inputs": ["(10, 2)", "(10, 3)", "(10, 1)"], "outputs": [90, 720, 10], "innvocations": ["permutation_coefficient(10, 2)\n", "permutation_coefficient(10, 3)\n", "permutation_coefficient(10, 1)\n"]}
{"task_id": "DREval/650", "code": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1\n", "entry_point": "remove_words", "inputs": ["(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])", "(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])", "(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])"], "outputs": [["red", "green", "blue", "black"], ["red", "green", "blue", "white"], ["red", "green", "black", "orange"]], "innvocations": ["remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n", "remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n", "remove_words([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n"]}
{"task_id": "DREval/652", "code": "def average_Odd(n):\n    if n % 2 == 0:\n        return \"Invalid Input\"\n        return -1\n    sm = 0\n    count = 0\n    while n >= 1:\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm // count\n", "entry_point": "average_Odd", "inputs": ["(9,)", "(5,)", "(11,)"], "outputs": [5, 3, 6], "innvocations": ["average_Odd(9)\n", "average_Odd(5)\n", "average_Odd(11)\n"]}
{"task_id": "DREval/653", "code": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for i in range(n + 1)] for j in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k][n]\n", "entry_point": "no_of_subsequences", "inputs": ["([1,2,3,4], 10)", "([4,8,7,2], 50)", "([5,6,7,8], 15)"], "outputs": [11, 9, 4], "innvocations": ["no_of_subsequences([1, 2, 3, 4], 10)\n", "no_of_subsequences([4, 8, 7, 2], 50)\n", "no_of_subsequences([5, 6, 7, 8], 15)\n"]}
